{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to geomapdemo","text":"<p>A Python package for interactive mapping.</p>"},{"location":"#logo","title":"Logo","text":"<ul> <li>Free software: MIT license</li> <li>Documentation: https://zyang91.github.io/geomapdemo</li> </ul>"},{"location":"#features","title":"Features","text":"<ul> <li>Create random numbers and random text</li> <li>Basic Mapping feature (control function)</li> <li>Ipyleaflet-based interactive map function</li> <li>Added layers and basemap to interactive map</li> <li>Added HTTPS and local raster layer function</li> <li>Folium-based interactive map function</li> </ul>"},{"location":"#supported-python-version","title":"Supported Python Version","text":"<ul> <li>Python 3</li> <li>Python 3.8</li> <li>Python 3.9</li> <li>Python 3.10</li> <li>Python 3.11</li> <li>Python 3.12</li> <li>Python 3.13</li> </ul>"},{"location":"Statement_of_need/","title":"Statement of Need","text":"<p>geomapdemo is a Python package for interactive mapping. It is designed to be a simple and easy-to-use mapping package and a teaching tool for students to learn about mapping and Python. Chart plotting is one of the key elements to do spatial analysis. Currently, most of the Python interactive mapping packages, such as <code>ipyleaflet</code>, <code>folium</code> does not support chart making. This package is designed to fill this gap. Users don't need to download commonly used plotting packages such as <code>matplotlib</code>, <code>seaborn</code> to make charts. This package is designed to be a one-stop shop for mapping and chart plotting.</p>"},{"location":"changelog/","title":"Changelog","text":""},{"location":"changelog/#v033-may-12-2023","title":"v0.3.3 -May 12, 2023","text":"<p>New Features</p> <ul> <li>Added export function that allow users to export their map to html</li> <li>Added more chart making operation</li> </ul>"},{"location":"changelog/#v032-may-7-2023","title":"v0.3.2 -May 7, 2023","text":"<p>New Features</p> <p>-added Toolbar function for geomapdemo module</p>"},{"location":"changelog/#v031-april-29-2023","title":"v0.3.1 -April 29, 2023","text":"<p>New Features</p> <ul> <li>added scatter ploy function</li> <li>added violin plot function</li> </ul>"},{"location":"changelog/#v030-april-27-2023","title":"v0.3.0 -April 27, 2023","text":"<p>New Module - Seaborn chart module created - More update coming soon</p>"},{"location":"changelog/#v022-april-26-2023","title":"v0.2.2 -April 26, 2023","text":"<p>New features</p> <ul> <li>Choropleth map function within the foliumap module</li> <li>Layer control function within the foliumap module</li> <li>Check at doc pages and new examples</li> </ul>"},{"location":"changelog/#v021-april-25-2023","title":"v0.2.1 -April 25, 2023","text":"<p>New features</p> <p>Please check the documentation at the API reference in foliumap section!</p> <ul> <li>polygon fucntion</li> <li>geojson function</li> </ul>"},{"location":"changelog/#v020-april-24-2023","title":"v0.2.0 -April 24, 2023","text":"<p>New Section</p> <ul> <li>added foliumap section</li> <li>updated ipyleaflet section</li> <li>More coming soon</li> </ul>"},{"location":"changelog/#v015-april-23-2023","title":"v0.1.5 -April 23, 2023","text":"<p>New features</p> <p>-update added raster function</p>"},{"location":"changelog/#v-014-april-16-2023","title":"v 0.1.4 -April 16, 2023","text":"<p>New features</p> <ul> <li>added marker function</li> </ul>"},{"location":"changelog/#v-013-april-16-2023","title":"v 0.1.3 -April 16, 2023","text":"<p>New features</p> <ul> <li>added more function</li> <li>fix bugs</li> </ul>"},{"location":"changelog/#v-012-april-16-2023","title":"v 0.1.2- April 16, 2023","text":"<p>New features</p> <ul> <li>added shapfile function</li> <li>added basemap function</li> </ul>"},{"location":"changelog/#v-011-april-15-2023","title":"v 0.1.1- April 15, 2023","text":"<p>New features</p> <ul> <li>Mapping feature added</li> <li>Allow people do basic mapping and drawing</li> </ul>"},{"location":"changelog/#v-010-april-13-2023","title":"v 0.1.0 -April 13, 2023","text":"<p>New features</p> <ul> <li>first available function create: choose a random number</li> <li>second available function create: create a random text</li> <li>Much improvement, way to success</li> </ul>"},{"location":"changelog/#v-005-april-11-2023","title":"v 0.0.5 -April 11, 2023","text":"<ul> <li>create two new function</li> </ul>"},{"location":"changelog/#v-004-april-11-2023","title":"v 0.0.4 -April 11, 2023","text":"<ul> <li>no major update, just testing</li> </ul>"},{"location":"changelog/#v003-march-18-2023","title":"v0.0.3 - March 18, 2023","text":"<ul> <li>Created documentation</li> </ul>"},{"location":"changelog/#v001-march-15-2023","title":"v0.0.1 - March 15, 2023","text":"<ul> <li>Initial release</li> </ul>"},{"location":"chart/","title":"Chart module","text":"<p>Chart module for creating interactive chart.</p>"},{"location":"chart/#geomapdemo.chart.bar_plot","title":"<code>bar_plot(data, x, y, hue=None, **kwargs)</code>","text":"<p>Plot data and regression model fits across a FacetGrid. Used to plot a bar chart</p> <p>Parameters:</p> Name Type Description Default <code>data</code> <code>DataFrame</code> <p>CSV file path or DataFrame object.</p> required <code>x,</code> <code>y (str</code> <p>Variables that specify positions on the x and y axes.</p> required <code>hue</code> <code>str</code> <p>Variable in data to map plot aspects to different colors.</p> <code>None</code> <code>kwargs</code> <p>Additional keyword arguments are passed to the function used to draw the plot on the joint Axes, superseding items in the joint_kws dictionary.</p> <code>{}</code> Source code in <code>geomapdemo/chart.py</code> <pre><code>def bar_plot(data, x, y, hue=None, **kwargs):\n    \"\"\"Plot data and regression model fits across a FacetGrid. Used to plot a bar chart\n    Args:\n        data (DataFrame): CSV file path or DataFrame object.\n        x, y (str): Variables that specify positions on the x and y axes.\n        hue (str): Variable in data to map plot aspects to different colors.\n        kwargs: Additional keyword arguments are passed to the function used to draw the plot on the joint Axes, superseding items in the joint_kws dictionary.\n    \"\"\"\n    if isinstance(data, str):\n        df = pd.read_csv(data)\n    else:\n        df = data\n    sns.barplot(data=df, x=x, y=y, hue=hue, **kwargs)\n</code></pre>"},{"location":"chart/#geomapdemo.chart.box_plot","title":"<code>box_plot(data, x, y, hue=None, **kwargs)</code>","text":"<p>Plot data and regression model fits across a FacetGrid. Used to plot a box chart</p> <p>Parameters:</p> Name Type Description Default <code>data</code> <code>DataFrame</code> <p>CSV file path or DataFrame object.</p> required <code>x,</code> <code>y (str</code> <p>Variables that specify positions on the x and y axes.</p> required <code>hue</code> <code>str</code> <p>Variable in data to map plot aspects to different colors.</p> <code>None</code> <code>kwargs</code> <p>Additional keyword arguments are passed to the function used to draw the plot on the joint Axes, superseding items in the joint_kws dictionary.</p> <code>{}</code> Source code in <code>geomapdemo/chart.py</code> <pre><code>def box_plot(data, x, y, hue=None, **kwargs):\n    \"\"\"Plot data and regression model fits across a FacetGrid. Used to plot a box chart\n    Args:\n        data (DataFrame): CSV file path or DataFrame object.\n        x, y (str): Variables that specify positions on the x and y axes.\n        hue (str): Variable in data to map plot aspects to different colors.\n        kwargs: Additional keyword arguments are passed to the function used to draw the plot on the joint Axes, superseding items in the joint_kws dictionary.\n    \"\"\"\n    if isinstance(data, str):\n        df = pd.read_csv(data)\n    else:\n        df = data\n    sns.boxplot(data=df, x=x, y=y, hue=hue, **kwargs)\n</code></pre>"},{"location":"chart/#geomapdemo.chart.count_plot","title":"<code>count_plot(data, x, hue=None, **kwargs)</code>","text":"<p>Plot data and regression model fits across a FacetGrid. Can be used to plot a single variable.(changable to single_count_plot)</p> <p>Parameters:</p> Name Type Description Default <code>data</code> <code>DataFrame</code> <p>CSV file path or DataFrame object.</p> required <code>x</code> <code>str</code> <p>Variables that specify positions on the x and y axes.</p> required <code>hue</code> <code>str</code> <p>Variable in data to map plot aspects to different colors.</p> <code>None</code> <code>kwargs</code> <p>Additional keyword arguments are passed to the function used to draw the plot on the joint Axes, superseding items in the joint_kws dictionary.</p> <code>{}</code> Source code in <code>geomapdemo/chart.py</code> <pre><code>def count_plot(data, x, hue=None, **kwargs):\n    \"\"\"Plot data and regression model fits across a FacetGrid. Can be used to plot a single variable.(changable to single_count_plot)\n    Args:\n        data (DataFrame): CSV file path or DataFrame object.\n        x (str): Variables that specify positions on the x and y axes.\n        hue (str): Variable in data to map plot aspects to different colors.\n        kwargs: Additional keyword arguments are passed to the function used to draw the plot on the joint Axes, superseding items in the joint_kws dictionary.\n    \"\"\"\n    if isinstance(data, str):\n        df = pd.read_csv(data)\n    else:\n        df = data\n    sns.countplot(data=df, x=x, hue=hue, **kwargs)\n</code></pre>"},{"location":"chart/#geomapdemo.chart.point_plot","title":"<code>point_plot(data, x, y, hue=None, **kwargs)</code>","text":"<p>Plot data and regression model fits across a FacetGrid. Can be used to plot a single variable.(changable to single_point_plot)</p> <p>Parameters:</p> Name Type Description Default <code>data</code> <code>DataFrame</code> <p>CSV file path or DataFrame object.</p> required <code>x,</code> <code>y (str</code> <p>Variables that specify positions on the x and y axes.</p> required <code>hue</code> <code>str</code> <p>Variable in data to map plot aspects to different colors.</p> <code>None</code> <code>kwargs</code> <p>Additional keyword arguments are passed to the function used to draw the plot on the joint Axes, superseding items in the joint_kws dictionary.</p> <code>{}</code> Source code in <code>geomapdemo/chart.py</code> <pre><code>def point_plot(data, x, y, hue=None, **kwargs):\n    \"\"\"Plot data and regression model fits across a FacetGrid. Can be used to plot a single variable.(changable to single_point_plot)\n    Args:\n        data (DataFrame): CSV file path or DataFrame object.\n        x, y (str): Variables that specify positions on the x and y axes.\n        hue (str): Variable in data to map plot aspects to different colors.\n        kwargs: Additional keyword arguments are passed to the function used to draw the plot on the joint Axes, superseding items in the joint_kws dictionary.\n    \"\"\"\n    if isinstance(data, str):\n        df = pd.read_csv(data)\n    else:\n        df = data\n    sns.pointplot(data=df, x=x, y=y, hue=hue, **kwargs)\n</code></pre>"},{"location":"chart/#geomapdemo.chart.scatter_plot","title":"<code>scatter_plot(data, x, y, hue=None, **kwargs)</code>","text":"<p>Plot data and regression model fits across a FacetGrid. Used to plot a scatter chart</p> <p>Parameters:</p> Name Type Description Default <code>data</code> <code>DataFrame</code> <p>CSV file path or DataFrame object.</p> required <code>x,</code> <code>y (str</code> <p>Variables that specify positions on the x and y axes.</p> required <code>hue</code> <code>str</code> <p>Variable in data to map plot aspects to different colors.</p> <code>None</code> <code>kwargs</code> <p>Additional keyword arguments are passed to the function used to draw the plot on the joint Axes, superseding items in the joint_kws dictionary.</p> <code>{}</code> Source code in <code>geomapdemo/chart.py</code> <pre><code>def scatter_plot(data, x, y, hue=None, **kwargs):\n    \"\"\"Plot data and regression model fits across a FacetGrid. Used to plot a scatter chart\n    Args:\n        data (DataFrame): CSV file path or DataFrame object.\n        x, y (str): Variables that specify positions on the x and y axes.\n        hue (str): Variable in data to map plot aspects to different colors.\n        kwargs: Additional keyword arguments are passed to the function used to draw the plot on the joint Axes, superseding items in the joint_kws dictionary.\n    \"\"\"\n    if isinstance(data, str):\n        df = pd.read_csv(data)\n    else:\n        df = data\n    sns.catplot(data=df, x=x, y=y, hue=hue, **kwargs)\n</code></pre>"},{"location":"chart/#geomapdemo.chart.set_default_theme","title":"<code>set_default_theme(style='darkgrid', **kwargs)</code>","text":"<p>Set the aesthetic style of the plots.</p> <p>Parameters:</p> Name Type Description Default <code>style</code> <code>str</code> <p>darkgrid, darkgrid, dark, white, ticks</p> <code>'darkgrid'</code> <code>kwargs</code> <p>Additional parameters to control the aesthetics of the grid.</p> <code>{}</code> Source code in <code>geomapdemo/chart.py</code> <pre><code>def set_default_theme(style=\"darkgrid\", **kwargs):\n    \"\"\"Set the aesthetic style of the plots.\n    Args:\n        style (str): darkgrid, darkgrid, dark, white, ticks\n        kwargs: Additional parameters to control the aesthetics of the grid.\"\"\"\n    sns.set_theme(style=style, **kwargs)\n</code></pre>"},{"location":"chart/#geomapdemo.chart.single_bar_plot","title":"<code>single_bar_plot(data, variable, **kwargs)</code>","text":"<p>Plot data and regression model fits across a FacetGrid. Can be used to plot a single bar chart variable.(changable to bar_plot)</p> <p>Parameters:</p> Name Type Description Default <code>data</code> <code>DataFrame</code> <p>CSV file path or DataFrame object.</p> required <code>variable</code> <code>str</code> <p>Variables that specify positions on the x and y axes.</p> required <code>kwargs</code> <p>Additional keyword arguments are passed to the function used to draw the plot on the joint Axes, superseding items in the joint_kws dictionary.</p> <code>{}</code> Source code in <code>geomapdemo/chart.py</code> <pre><code>def single_bar_plot(data, variable, **kwargs):\n    \"\"\"Plot data and regression model fits across a FacetGrid. Can be used to plot a single bar chart variable.(changable to bar_plot)\n    Args:\n        data (DataFrame): CSV file path or DataFrame object.\n        variable (str): Variables that specify positions on the x and y axes.\n        kwargs: Additional keyword arguments are passed to the function used to draw the plot on the joint Axes, superseding items in the joint_kws dictionary.\n    \"\"\"\n    if isinstance(data, str):\n        df = pd.read_csv(data)\n    else:\n        df = data\n    sns.barplot(data=df, y=df[variable], **kwargs)\n</code></pre>"},{"location":"chart/#geomapdemo.chart.single_box_plot","title":"<code>single_box_plot(data, variable, **kwargs)</code>","text":"<p>Plot data and regression model fits across a FacetGrid. Used to plot a single box chart !!! aegs     data (DataFrame): CSV file path or DataFrame object.     variable (str): Variables that specify positions on the x and y axes.     kwargs: Additional keyword arguments are passed to the function used to draw the plot on the joint Axes, superseding items in the joint_kws dictionary.</p> Source code in <code>geomapdemo/chart.py</code> <pre><code>def single_box_plot(data, variable, **kwargs):\n    \"\"\"Plot data and regression model fits across a FacetGrid. Used to plot a single box chart\n    Aegs:\n        data (DataFrame): CSV file path or DataFrame object.\n        variable (str): Variables that specify positions on the x and y axes.\n        kwargs: Additional keyword arguments are passed to the function used to draw the plot on the joint Axes, superseding items in the joint_kws dictionary.\n    \"\"\"\n    if isinstance(data, str):\n        df = pd.read_csv(data)\n    else:\n        df = data\n    sns.boxplot(data=df, x=df[variable], **kwargs)\n</code></pre>"},{"location":"chart/#geomapdemo.chart.single_count_plot","title":"<code>single_count_plot(data, variable, **kwargs)</code>","text":"<p>Plot data and regression model fits across a FacetGrid. Can be used to plot a single variable.(changable to count_plot)</p> <p>Parameters:</p> Name Type Description Default <code>data</code> <code>DataFrame</code> <p>CSV file path or DataFrame object.</p> required <code>variable</code> <code>str</code> <p>Variables that specify positions on the x and y axes.</p> required <code>kwargs</code> <p>Additional keyword arguments are passed to the function used to draw the plot on the joint Axes, superseding items in the joint_kws dictionary.</p> <code>{}</code> Source code in <code>geomapdemo/chart.py</code> <pre><code>def single_count_plot(data, variable, **kwargs):\n    \"\"\"Plot data and regression model fits across a FacetGrid. Can be used to plot a single variable.(changable to count_plot)\n    Args:\n        data (DataFrame): CSV file path or DataFrame object.\n        variable (str): Variables that specify positions on the x and y axes.\n        kwargs: Additional keyword arguments are passed to the function used to draw the plot on the joint Axes, superseding items in the joint_kws dictionary.\n    \"\"\"\n    if isinstance(data, str):\n        df = pd.read_csv(data)\n    else:\n        df = data\n    sns.countplot(data=df, x=df[variable], **kwargs)\n</code></pre>"},{"location":"chart/#geomapdemo.chart.single_violin","title":"<code>single_violin(data, variable, **kwargs)</code>","text":"<p>Plot data and regression model fits across a FacetGrid. Used to plot a single violin chart</p> <p>Parameters:</p> Name Type Description Default <code>data</code> <code>DataFrame</code> <p>CSV file path or DataFrame object.</p> required <code>variable</code> <code>str</code> <p>Variables that specify positions on the x and y axes.</p> required <code>kwargs</code> <p>Additional keyword arguments are passed to the function used to draw the plot on the joint Axes, superseding items in the joint_kws dictionary.</p> <code>{}</code> Source code in <code>geomapdemo/chart.py</code> <pre><code>def single_violin(data, variable, **kwargs):\n    \"\"\"Plot data and regression model fits across a FacetGrid. Used to plot a single violin chart\n    Args:\n        data (DataFrame): CSV file path or DataFrame object.\n        variable (str): Variables that specify positions on the x and y axes.\n        kwargs: Additional keyword arguments are passed to the function used to draw the plot on the joint Axes, superseding items in the joint_kws dictionary.\n    \"\"\"\n    if isinstance(data, str):\n        df = pd.read_csv(data)\n    else:\n        df = data\n    sns.violinplot(x=df[variable], **kwargs)\n</code></pre>"},{"location":"chart/#geomapdemo.chart.violin_plot","title":"<code>violin_plot(data, x, y, hue=None, **kwargs)</code>","text":"<p>Plot data and regression model fits across a FacetGrid. Used to plot a violin chart</p> <p>Parameters:</p> Name Type Description Default <code>data</code> <code>DataFrame</code> <p>CSV file path or DataFrame object.</p> required <code>x,</code> <code>y (str</code> <p>Variables that specify positions on the x and y axes.</p> required <code>hue</code> <code>str</code> <p>Variable in data to map plot aspects to different colors.</p> <code>None</code> <code>kwargs</code> <p>Additional keyword arguments are passed to the function used to draw the plot on the joint Axes, superseding items in the joint_kws dictionary.</p> <code>{}</code> Source code in <code>geomapdemo/chart.py</code> <pre><code>def violin_plot(data, x, y, hue=None, **kwargs):\n    \"\"\"Plot data and regression model fits across a FacetGrid. Used to plot a violin chart\n    Args:\n        data (DataFrame): CSV file path or DataFrame object.\n        x, y (str): Variables that specify positions on the x and y axes.\n        hue (str): Variable in data to map plot aspects to different colors.\n        kwargs: Additional keyword arguments are passed to the function used to draw the plot on the joint Axes, superseding items in the joint_kws dictionary.\n    \"\"\"\n    if isinstance(data, str):\n        df = pd.read_csv(data)\n    else:\n        df = data\n    sns.violinplot(data=df, x=x, y=y, hue=hue, **kwargs)\n</code></pre>"},{"location":"chart/#geomapdemo.chart.violin_spilt","title":"<code>violin_spilt(data, x, y, hue, spilt=True, **kwargs)</code>","text":"<p>Plot data and regression model fits across a FacetGrid. Used to plot a spilt violin chart</p> <p>Parameters:</p> Name Type Description Default <code>data</code> <code>DataFrame</code> <p>CSV file path or DataFrame object.</p> required <code>x,</code> <code>y (str</code> <p>Variables that specify positions on the x and y axes.</p> required <code>hue</code> <code>str</code> <p>Variable in data to map plot aspects to different colors.</p> required <code>spilt</code> <code>bool</code> <p>Whether to draw half of a violin for each hue level or allow them to overlap.</p> <code>True</code> <code>kwargs</code> <p>Additional keyword arguments are passed to the function used to draw the plot on the joint Axes, superseding items in the joint_kws dictionary.</p> <code>{}</code> Source code in <code>geomapdemo/chart.py</code> <pre><code>def violin_spilt(data, x, y, hue, spilt=True, **kwargs):\n    \"\"\"Plot data and regression model fits across a FacetGrid. Used to plot a spilt violin chart\n    Args:\n        data (DataFrame): CSV file path or DataFrame object.\n        x, y (str): Variables that specify positions on the x and y axes.\n        hue (str): Variable in data to map plot aspects to different colors.\n        spilt (bool): Whether to draw half of a violin for each hue level or allow them to overlap.\n        kwargs: Additional keyword arguments are passed to the function used to draw the plot on the joint Axes, superseding items in the joint_kws dictionary.\n    \"\"\"\n    if isinstance(data, str):\n        df = pd.read_csv(data)\n    else:\n        df = data\n    sns.violinplot(data=df, x=x, y=y, hue=hue, split=spilt, **kwargs)\n</code></pre>"},{"location":"code_of_conduct/","title":"Contributor Covenant Code of Conduct","text":""},{"location":"code_of_conduct/#our-pledge","title":"Our Pledge","text":"<p>We as members, contributors, and leaders pledge to make participation in our community a harassment-free experience for everyone, regardless of age, body size, visible or invisible disability, ethnicity, sex characteristics, gender identity and expression, level of experience, education, socio-economic status, nationality, personal appearance, race, religion, or sexual identity and orientation.</p> <p>We pledge to act and interact in ways that contribute to an open, welcoming, diverse, inclusive, and healthy community.</p>"},{"location":"code_of_conduct/#our-standards","title":"Our Standards","text":"<p>Examples of behavior that contributes to a positive environment for our community include:</p> <ul> <li>Demonstrating empathy and kindness toward other people</li> <li>Being respectful of differing opinions, viewpoints, and experiences</li> <li>Giving and gracefully accepting constructive feedback</li> <li>Accepting responsibility and apologizing to those affected by our mistakes,   and learning from the experience</li> <li>Focusing on what is best not just for us as individuals, but for the   overall community</li> </ul> <p>Examples of unacceptable behavior include:</p> <ul> <li>The use of sexualized language or imagery, and sexual attention or   advances of any kind</li> <li>Trolling, insulting or derogatory comments, and personal or political attacks</li> <li>Public or private harassment</li> <li>Publishing others' private information, such as a physical or email   address, without their explicit permission</li> <li>Other conduct which could reasonably be considered inappropriate in a   professional setting</li> </ul>"},{"location":"code_of_conduct/#enforcement-responsibilities","title":"Enforcement Responsibilities","text":"<p>Community leaders are responsible for clarifying and enforcing our standards of acceptable behavior and will take appropriate and fair corrective action in response to any behavior that they deem inappropriate, threatening, offensive, or harmful.</p> <p>Community leaders have the right and responsibility to remove, edit, or reject comments, commits, code, wiki edits, issues, and other contributions that are not aligned to this Code of Conduct, and will communicate reasons for moderation decisions when appropriate.</p>"},{"location":"code_of_conduct/#scope","title":"Scope","text":"<p>This Code of Conduct applies within all community spaces, and also applies when an individual is officially representing the community in public spaces. Examples of representing our community include using an official e-mail address, posting via an official social media account, or acting as an appointed representative at an online or offline event.</p>"},{"location":"code_of_conduct/#enforcement","title":"Enforcement","text":"<p>Instances of abusive, harassing, or otherwise unacceptable behavior may be reported to the community leaders responsible for enforcement at zyang91@binghamton.edu. All complaints will be reviewed and investigated promptly and fairly.</p> <p>All community leaders are obligated to respect the privacy and security of the reporter of any incident.</p>"},{"location":"code_of_conduct/#enforcement-guidelines","title":"Enforcement Guidelines","text":"<p>Community leaders will follow these Community Impact Guidelines in determining the consequences for any action they deem in violation of this Code of Conduct:</p>"},{"location":"code_of_conduct/#1-correction","title":"1. Correction","text":"<p>Community Impact: Use of inappropriate language or other behavior deemed unprofessional or unwelcome in the community.</p> <p>Consequence: A private, written warning from community leaders, providing clarity around the nature of the violation and an explanation of why the behavior was inappropriate. A public apology may be requested.</p>"},{"location":"code_of_conduct/#2-warning","title":"2. Warning","text":"<p>Community Impact: A violation through a single incident or series of actions.</p> <p>Consequence: A warning with consequences for continued behavior. No interaction with the people involved, including unsolicited interaction with those enforcing the Code of Conduct, for a specified period of time. This includes avoiding interactions in community spaces as well as external channels like social media. Violating these terms may lead to a temporary or permanent ban.</p>"},{"location":"code_of_conduct/#3-temporary-ban","title":"3. Temporary Ban","text":"<p>Community Impact: A serious violation of community standards, including sustained inappropriate behavior.</p> <p>Consequence: A temporary ban from any sort of interaction or public communication with the community for a specified period of time. No public or private interaction with the people involved, including unsolicited interaction with those enforcing the Code of Conduct, is allowed during this period. Violating these terms may lead to a permanent ban.</p>"},{"location":"code_of_conduct/#4-permanent-ban","title":"4. Permanent Ban","text":"<p>Community Impact: Demonstrating a pattern of violation of community standards, including sustained inappropriate behavior,  harassment of an individual, or aggression toward or disparagement of classes of individuals.</p> <p>Consequence: A permanent ban from any sort of public interaction within the community.</p>"},{"location":"code_of_conduct/#attribution","title":"Attribution","text":"<p>This Code of Conduct is adapted from the Contributor Covenant, version 2.0, available at https://www.contributor-covenant.org/version/2/0/code_of_conduct.html.</p> <p>Community Impact Guidelines were inspired by Mozilla's code of conduct enforcement ladder.</p> <p>For answers to common questions about this code of conduct, see the FAQ at https://www.contributor-covenant.org/faq. Translations are available at https://www.contributor-covenant.org/translations.</p>"},{"location":"contributing/","title":"Contributing","text":"<p>Contributions are welcome, and they are greatly appreciated! Every little bit helps, and credit will always be given.</p> <p>You can contribute in many ways:</p>"},{"location":"contributing/#types-of-contributions","title":"Types of Contributions","text":""},{"location":"contributing/#report-bugs","title":"Report Bugs","text":"<p>Report bugs at https://github.com/zyang91/geomapdemo/issues.</p> <p>If you are reporting a bug, please include:</p> <ul> <li>Your operating system name and version.</li> <li>Any details about your local setup that might be helpful in troubleshooting.</li> <li>Detailed steps to reproduce the bug.</li> </ul>"},{"location":"contributing/#fix-bugs","title":"Fix Bugs","text":"<p>Look through the GitHub issues for bugs. Anything tagged with <code>bug</code> and <code>help wanted</code> is open to whoever wants to implement it.</p>"},{"location":"contributing/#implement-features","title":"Implement Features","text":"<p>Look through the GitHub issues for features. Anything tagged with <code>enhancement</code> and <code>help wanted</code> is open to whoever wants to implement it.</p>"},{"location":"contributing/#write-documentation","title":"Write Documentation","text":"<p>geomapdemo could always use more documentation, whether as part of the official geomapdemo docs, in docstrings, or even on the web in blog posts, articles, and such.</p>"},{"location":"contributing/#submit-feedback","title":"Submit Feedback","text":"<p>The best way to send feedback is to file an issue at https://github.com/zyang91/geomapdemo/issues.</p> <p>If you are proposing a feature:</p> <ul> <li>Explain in detail how it would work.</li> <li>Keep the scope as narrow as possible, to make it easier to implement.</li> <li>Remember that this is a volunteer-driven project, and that contributions are welcome :)</li> </ul>"},{"location":"contributing/#get-started","title":"Get Started!","text":"<p>Ready to contribute? Here's how to set up geomapdemo for local development.</p> <ol> <li> <p>Fork the geomapdemo repo on GitHub.</p> </li> <li> <p>Clone your fork locally:</p> <pre><code>$ git clone git@github.com:your_name_here/geomapdemo.git\n</code></pre> </li> <li> <p>Install your local copy into a virtualenv. Assuming you have     virtualenvwrapper installed, this is how you set up your fork for     local development:</p> <pre><code>$ mkvirtualenv geomapdemo\n$ cd geomapdemo/\n$ python setup.py develop\n</code></pre> </li> <li> <p>Create a branch for local development:</p> <pre><code>$ git checkout -b name-of-your-bugfix-or-feature\n</code></pre> <p>Now you can make your changes locally.</p> </li> <li> <p>When you're done making changes, check that your changes pass flake8     and the tests, including testing other Python versions with tox:</p> <pre><code>$ flake8 geomapdemo tests\n$ python setup.py test or pytest\n$ tox\n</code></pre> <p>To get flake8 and tox, just pip install them into your virtualenv.</p> </li> <li> <p>Commit your changes and push your branch to GitHub:</p> <pre><code>$ git add .\n$ git commit -m \"Your detailed description of your changes.\"\n$ git push origin name-of-your-bugfix-or-feature\n</code></pre> </li> <li> <p>Submit a pull request through the GitHub website.</p> </li> </ol>"},{"location":"contributing/#pull-request-guidelines","title":"Pull Request Guidelines","text":"<p>Before you submit a pull request, check that it meets these guidelines:</p> <ol> <li>The pull request should include tests.</li> <li>If the pull request adds functionality, the docs should be updated.     Put your new functionality into a function with a docstring, and add     the feature to the list in README.rst.</li> <li>The pull request should work for Python 3.5, 3.6, 3.7 and 3.8, and     for PyPy. Check https://github.com/zyang91/geomapdemo/pull_requests and make sure that the tests pass for all     supported Python versions.</li> </ol>"},{"location":"faq/","title":"FAQ","text":""},{"location":"faq/#what-functions-are-currently-available","title":"What functions are currently available?","text":"<p>Answer: The current function includes adding a base map, vector layer (shapefile), Geojson, drawing, and making markers on the interactive map.</p>"},{"location":"faq/#will-there-be-more-functions-in-the-future","title":"Will there be more functions in the future?","text":"<p>Answer: Yes. The package is still under development. More features, such as adding a raster layer and more control options, will be updated soon. Please be sure to stay patient.</p>"},{"location":"faq/#how-to-report-an-issue-or-make-a-feature-request","title":"How to report an issue or make a feature request?","text":"<p>Answer: Reporting issues from GitHub is now available. The feature request will not be processed after the basic feature development. Please go to https://github.com/zyang91/geomapdemo/issues to leave any comments.  Discussion boards are also available at https://github.com/zyang91/geomapdemo/discussions</p>"},{"location":"faq/#how-can-i-install-the-package","title":"How can I install the package?","text":"<p>Answer: The package is currently available at Pypi and under review by conda-forge. You can also clone from the GitHub repo using git.</p>"},{"location":"faq/#what-modules-are-currently-available","title":"What modules are currently available?","text":"<p>Answer: Currently, there are three modules available. The main one is the geomapdemo module, which is mainly based on ipyleaflet interactive map making. The backup one is the foliumap module, which is mainly based on folium interactive map making. The third one is the chart module, which is used to make interactive charts for GIS Analysis. All three modules are still under development.</p> <p>For the difference between the two modules, please check the API reference on the documentation website.</p>"},{"location":"faq/#why-does-the-interactive-map-not-show-up","title":"Why does the interactive map not show up?","text":"<p>Answer: If the interactive map does not appear on Jupyter Notebook and JupyterLab, it is probably because the ipyleaflet extension has not been installed properly. For example, you might receive an error message saying <code>Error displaying widget: model not found.</code> This a well-known issue related to ipyleaflet. (For example, on the doc website, some examples don't show up)</p>"},{"location":"faq/#are-there-any-tutorial-videos-or-examples-to-learn-about-the-package","title":"Are there any tutorial videos or examples to learn about the package?","text":"<p>Answer: Unfortunately, tutorial videos are currently unavailable. Examples are available on the documentation website under the examples tab.</p>"},{"location":"faq/#more-questions","title":"More questions?","text":"<p>Feel free to discuss in the discussion section or send me an email at zhanchaoyang69@gmail.com</p>"},{"location":"foliumap/","title":"foliumap module","text":"<p>Folium module for creating a map.</p>"},{"location":"foliumap/#geomapdemo.foliumap.Map","title":"<code> Map            (Map)         </code>","text":"<p>Create a folium map object.</p> Source code in <code>geomapdemo/foliumap.py</code> <pre><code>class Map(folium.Map):\n    \"\"\"Create a folium map object.\"\"\"\n\n    def __init__(self, center=[20, 0], zoom=10, **kwargs) -&gt; None:\n        \"\"\"Initialize the map objects.\n        Args:\n            center (list, optional): The center of the map. Defaults to [20,0].\n            zoom (int, optional): Zoom level. Defaults to 10.\n            **kwargs: Keyword arguments.\n        \"\"\"\n\n        super().__init__(location=center, zoom_start=zoom, **kwargs)\n\n    def add_tile_layer(self, url, name, attribution=\" \", **kwargs):\n        \"\"\"Adds a tile layer to the map\n        Args:\n            url (str): The url of the tile layer.\n            name (str): The name of the tile layer.\n            attribution (str, optional): The attribution of the tile layer. Defaults to \"\".\n            **kwargs: Keyword arguments to be passed to the tile layer.\n        \"\"\"\n        tile_layer = folium.TileLayer(tiles=url, name=name, attr=attribution, **kwargs)\n        self.add_child(tile_layer)\n\n    def add_marker(self, location, popup, **kwargs):\n        \"\"\"Adds a marker to the map\n        Args:\n            location (list): The location of the marker.\n            popup (str): The popup text of the marker.\n            **kwargs: Keyword arguments to be passed to the marker.\n        \"\"\"\n        marker = folium.Marker(location=location, popup=popup, **kwargs)\n        self.add_child(marker)\n\n    def add_circle_marker(self, location, radius=10, popup=\"\", fill=True, **kwargs):\n        \"\"\"Adds a circle marker to the map\n        Args:\n            location (list): The location of the marker.\n            radius (int): The radius of the circle marker.Defaults to 10.\n            popup (str): The popup text of the marker.\n            fill (bool): Whether to fill the circle marker. Defaults to False.\n            **kwargs: Keyword arguments to be passed to the marker.\n        \"\"\"\n        marker = folium.CircleMarker(\n            location=location, radius=radius, popup=popup, fill=fill, **kwargs\n        )\n        self.add_child(marker)\n\n    def add_circle(self, location, radius=10, popup=\"\", fill=False, **kwargs):\n        \"\"\"Adds a circle to the map\n        Args:\n            location (list): The location of the circle.\n            radius (int): The radius of the circle marker.Defaults to 10.\n            popup (str): The popup text of the marker.\n            fill (bool): Whether to fill the circle marker. Defaults to False.\n            **kwargs: Keyword arguments to be passed to the marker.\n        \"\"\"\n        marker = folium.Circle(\n            location=location, radius=radius, popup=popup, fill=fill, **kwargs\n        )\n        self.add_child(marker)\n\n    def click_for_marker(self, popup=\"click Point\"):\n        \"\"\"Adds a click listener to the map to add markers.\n        Args:\n            popup (str): The popup text of the marker. Defaults to \"click Point\".\n        \"\"\"\n        self.add_child(folium.ClickForMarker(popup=popup))\n\n    def add_polylines(self, locations, popup=\"\", **kwargs):\n        \"\"\"Adds a polyline to the map\n        Args:\n            locations (list): The locations of the polyline.\n            popup (str): The popup text of the polyline.\n            **kwargs: Keyword arguments to be passed to the polyline.\n        \"\"\"\n        polyline = folium.PolyLine(locations=locations, popup=popup, **kwargs)\n        self.add_child(polyline)\n\n    def add_polygon(self, locations, popup=\"\", **kwargs):\n        \"\"\"Adds a polygon to the map\n        Args:\n            locations (list): The locations of the polygon.\n            popup (str): The popup text of the polygon.\n            **kwargs: Keyword arguments to be passed to the polygon.\n        \"\"\"\n        polygon = folium.Polygon(locations=locations, popup=popup, **kwargs)\n        self.add_child(polygon)\n\n    def set_center(self, lat, lon, zoom=10):\n        \"\"\"Sets the center of the map\n        Args:\n            lat (float): The latitude of the center.\n            lon (float): The longitude of the center.\n            zoom (int): The zoom level. Defaults to 10.\n        \"\"\"\n        self.fit_bounds([[lat, lon], [lat, lon]], max_zoom=zoom)\n\n    def add_geojson(\n        self,\n        in_geojson,\n        layer_name=\"Untitled\",\n        encoding=\"utf-8\",\n        **kwargs,\n    ):\n        \"\"\"Adds a GeoJSON file to the map.\n\n        Args:\n            in_geojson (str): The input file path to the GeoJSON.\n            layer_name (str, optional): The layer name to be used. Defaults to \"Untitled\".\n            encoding (str, optional): The encoding of the GeoJSON file. Defaults to \"utf-8\".\n\n        Raises:\n            FileNotFoundError: The provided GeoJSON file could not be found.\n        \"\"\"\n        import json\n        import requests\n\n        if in_geojson.startswith(\"http\"):\n            response = requests.get(in_geojson)\n            data = response.json()\n        else:\n            try:\n                with open(in_geojson, encoding=encoding) as f:\n                    data = json.load(f)\n            except FileNotFoundError:\n                raise FileNotFoundError(\"The provided GeoJSON file could not be found.\")\n\n        # interchangeable parameters between ipyleaflet and folium.\n        style_dict = {}\n        if \"style_function\" not in kwargs:\n            if \"style\" not in kwargs:\n                style_dict = {\n                    # \"stroke\": True,\n                    \"color\": \"#3388ff\",\n                    \"weight\": 2,\n                    \"opacity\": 1,\n                    # \"fill\": True,\n                    # \"fillColor\": \"#ffffff\",\n                    \"fillOpacity\": 0,\n                    # \"dashArray\": \"9\"\n                    # \"clickable\": True,\n                }\n                kwargs[\"style_function\"] = lambda x: style_dict\n            else:\n                style_dict = kwargs[\"style\"]\n                kwargs[\"style_function\"] = lambda x: style_dict\n\n        geojson = folium.GeoJson(data=data, name=layer_name, **kwargs)\n        self.add_child(geojson)\n\n    def add_shp(self, path, name=\"Shapefile\", **kwargs):\n        \"\"\"Adds a shapefile to the map\n        Args:\n            path (str): The path to the shapefile.\n            name (str, optional): The name of the shapefile. Defaults to 'Shapefile'.\n            **kwargs: Keyword arguments to be passed to the shapefile.\n        \"\"\"\n        import geopandas as gpd\n\n        gdf = gpd.read_file(path)\n        geojson = gdf.__geo_interface__\n        json = folium.GeoJson(data=geojson, name=name, **kwargs)\n        self.add_child(json)\n\n    def add_choropleth_map(\n        self,\n        json,\n        csv,\n        columns,\n        key_on,\n        name=\"choropleth\",\n        fill_color=\"YlGn\",\n        legend_name=\"\",\n        **kwargs,\n    ):\n        \"\"\"Adds a choropleth map to the map\n        Args:\n            json (str): The path to the json file.\n            csv (str): The path to the csv file.\n            name (str, optional): The name of the choropleth map. Defaults to 'choropleth'.\n            fill_color (str, optional): The color scale of the choropleth map. Defaults to 'YlGn'.\n            legend_name (str, optional): The name of the legend. Defaults to ''.\n            **kwargs: Keyword arguments to be passed to the choropleth map.\n        \"\"\"\n        import geopandas as gpd\n        import pandas as pd\n\n        df = pd.read_csv(csv)\n\n        if \"fill_opacity\" not in kwargs:\n            kwargs[\"fill_opacity\"] = 0.7\n\n        if \"line_opacity\" not in kwargs:\n            kwargs[\"line_opacity\"] = 0.2\n\n        choropleth = folium.Choropleth(\n            geo_data=json,\n            name=name,\n            data=df,\n            columns=columns,\n            key_on=key_on,\n            fill_color=fill_color,\n            legend_name=legend_name,\n            **kwargs,\n        )\n        self.add_child(choropleth)\n        self.add_child(folium.LayerControl())\n\n    def add_layer_control(self):\n        \"\"\"Adds a layer control to the map\"\"\"\n        self.add_child(folium.LayerControl())\n\n    def add_layer(self, layer):\n        \"\"\"Adds a layer to the map\n        Args:\n            layer (TileLayer): A TileLayer instance.\n        \"\"\"\n        layer.add_to(self)\n\n    def export(self, outfile=\"map.html\"):\n        \"\"\"Saves the map to a file\n        Args:\n            outfile (str, optional): The output file path to the HTML file. Defaults to \"map.html\".\n        \"\"\"\n        self.save(outfile)\n</code></pre>"},{"location":"foliumap/#geomapdemo.foliumap.Map.__init__","title":"<code>__init__(self, center=[20, 0], zoom=10, **kwargs)</code>  <code>special</code>","text":"<p>Initialize the map objects.</p> <p>Parameters:</p> Name Type Description Default <code>center</code> <code>list</code> <p>The center of the map. Defaults to [20,0].</p> <code>[20, 0]</code> <code>zoom</code> <code>int</code> <p>Zoom level. Defaults to 10.</p> <code>10</code> <code>**kwargs</code> <p>Keyword arguments.</p> <code>{}</code> Source code in <code>geomapdemo/foliumap.py</code> <pre><code>def __init__(self, center=[20, 0], zoom=10, **kwargs) -&gt; None:\n    \"\"\"Initialize the map objects.\n    Args:\n        center (list, optional): The center of the map. Defaults to [20,0].\n        zoom (int, optional): Zoom level. Defaults to 10.\n        **kwargs: Keyword arguments.\n    \"\"\"\n\n    super().__init__(location=center, zoom_start=zoom, **kwargs)\n</code></pre>"},{"location":"foliumap/#geomapdemo.foliumap.Map.add_choropleth_map","title":"<code>add_choropleth_map(self, json, csv, columns, key_on, name='choropleth', fill_color='YlGn', legend_name='', **kwargs)</code>","text":"<p>Adds a choropleth map to the map</p> <p>Parameters:</p> Name Type Description Default <code>json</code> <code>str</code> <p>The path to the json file.</p> required <code>csv</code> <code>str</code> <p>The path to the csv file.</p> required <code>name</code> <code>str</code> <p>The name of the choropleth map. Defaults to 'choropleth'.</p> <code>'choropleth'</code> <code>fill_color</code> <code>str</code> <p>The color scale of the choropleth map. Defaults to 'YlGn'.</p> <code>'YlGn'</code> <code>legend_name</code> <code>str</code> <p>The name of the legend. Defaults to ''.</p> <code>''</code> <code>**kwargs</code> <p>Keyword arguments to be passed to the choropleth map.</p> <code>{}</code> Source code in <code>geomapdemo/foliumap.py</code> <pre><code>def add_choropleth_map(\n    self,\n    json,\n    csv,\n    columns,\n    key_on,\n    name=\"choropleth\",\n    fill_color=\"YlGn\",\n    legend_name=\"\",\n    **kwargs,\n):\n    \"\"\"Adds a choropleth map to the map\n    Args:\n        json (str): The path to the json file.\n        csv (str): The path to the csv file.\n        name (str, optional): The name of the choropleth map. Defaults to 'choropleth'.\n        fill_color (str, optional): The color scale of the choropleth map. Defaults to 'YlGn'.\n        legend_name (str, optional): The name of the legend. Defaults to ''.\n        **kwargs: Keyword arguments to be passed to the choropleth map.\n    \"\"\"\n    import geopandas as gpd\n    import pandas as pd\n\n    df = pd.read_csv(csv)\n\n    if \"fill_opacity\" not in kwargs:\n        kwargs[\"fill_opacity\"] = 0.7\n\n    if \"line_opacity\" not in kwargs:\n        kwargs[\"line_opacity\"] = 0.2\n\n    choropleth = folium.Choropleth(\n        geo_data=json,\n        name=name,\n        data=df,\n        columns=columns,\n        key_on=key_on,\n        fill_color=fill_color,\n        legend_name=legend_name,\n        **kwargs,\n    )\n    self.add_child(choropleth)\n    self.add_child(folium.LayerControl())\n</code></pre>"},{"location":"foliumap/#geomapdemo.foliumap.Map.add_circle","title":"<code>add_circle(self, location, radius=10, popup='', fill=False, **kwargs)</code>","text":"<p>Adds a circle to the map</p> <p>Parameters:</p> Name Type Description Default <code>location</code> <code>list</code> <p>The location of the circle.</p> required <code>radius</code> <code>int</code> <p>The radius of the circle marker.Defaults to 10.</p> <code>10</code> <code>popup</code> <code>str</code> <p>The popup text of the marker.</p> <code>''</code> <code>fill</code> <code>bool</code> <p>Whether to fill the circle marker. Defaults to False.</p> <code>False</code> <code>**kwargs</code> <p>Keyword arguments to be passed to the marker.</p> <code>{}</code> Source code in <code>geomapdemo/foliumap.py</code> <pre><code>def add_circle(self, location, radius=10, popup=\"\", fill=False, **kwargs):\n    \"\"\"Adds a circle to the map\n    Args:\n        location (list): The location of the circle.\n        radius (int): The radius of the circle marker.Defaults to 10.\n        popup (str): The popup text of the marker.\n        fill (bool): Whether to fill the circle marker. Defaults to False.\n        **kwargs: Keyword arguments to be passed to the marker.\n    \"\"\"\n    marker = folium.Circle(\n        location=location, radius=radius, popup=popup, fill=fill, **kwargs\n    )\n    self.add_child(marker)\n</code></pre>"},{"location":"foliumap/#geomapdemo.foliumap.Map.add_circle_marker","title":"<code>add_circle_marker(self, location, radius=10, popup='', fill=True, **kwargs)</code>","text":"<p>Adds a circle marker to the map</p> <p>Parameters:</p> Name Type Description Default <code>location</code> <code>list</code> <p>The location of the marker.</p> required <code>radius</code> <code>int</code> <p>The radius of the circle marker.Defaults to 10.</p> <code>10</code> <code>popup</code> <code>str</code> <p>The popup text of the marker.</p> <code>''</code> <code>fill</code> <code>bool</code> <p>Whether to fill the circle marker. Defaults to False.</p> <code>True</code> <code>**kwargs</code> <p>Keyword arguments to be passed to the marker.</p> <code>{}</code> Source code in <code>geomapdemo/foliumap.py</code> <pre><code>def add_circle_marker(self, location, radius=10, popup=\"\", fill=True, **kwargs):\n    \"\"\"Adds a circle marker to the map\n    Args:\n        location (list): The location of the marker.\n        radius (int): The radius of the circle marker.Defaults to 10.\n        popup (str): The popup text of the marker.\n        fill (bool): Whether to fill the circle marker. Defaults to False.\n        **kwargs: Keyword arguments to be passed to the marker.\n    \"\"\"\n    marker = folium.CircleMarker(\n        location=location, radius=radius, popup=popup, fill=fill, **kwargs\n    )\n    self.add_child(marker)\n</code></pre>"},{"location":"foliumap/#geomapdemo.foliumap.Map.add_geojson","title":"<code>add_geojson(self, in_geojson, layer_name='Untitled', encoding='utf-8', **kwargs)</code>","text":"<p>Adds a GeoJSON file to the map.</p> <p>Parameters:</p> Name Type Description Default <code>in_geojson</code> <code>str</code> <p>The input file path to the GeoJSON.</p> required <code>layer_name</code> <code>str</code> <p>The layer name to be used. Defaults to \"Untitled\".</p> <code>'Untitled'</code> <code>encoding</code> <code>str</code> <p>The encoding of the GeoJSON file. Defaults to \"utf-8\".</p> <code>'utf-8'</code> <p>Exceptions:</p> Type Description <code>FileNotFoundError</code> <p>The provided GeoJSON file could not be found.</p> Source code in <code>geomapdemo/foliumap.py</code> <pre><code>def add_geojson(\n    self,\n    in_geojson,\n    layer_name=\"Untitled\",\n    encoding=\"utf-8\",\n    **kwargs,\n):\n    \"\"\"Adds a GeoJSON file to the map.\n\n    Args:\n        in_geojson (str): The input file path to the GeoJSON.\n        layer_name (str, optional): The layer name to be used. Defaults to \"Untitled\".\n        encoding (str, optional): The encoding of the GeoJSON file. Defaults to \"utf-8\".\n\n    Raises:\n        FileNotFoundError: The provided GeoJSON file could not be found.\n    \"\"\"\n    import json\n    import requests\n\n    if in_geojson.startswith(\"http\"):\n        response = requests.get(in_geojson)\n        data = response.json()\n    else:\n        try:\n            with open(in_geojson, encoding=encoding) as f:\n                data = json.load(f)\n        except FileNotFoundError:\n            raise FileNotFoundError(\"The provided GeoJSON file could not be found.\")\n\n    # interchangeable parameters between ipyleaflet and folium.\n    style_dict = {}\n    if \"style_function\" not in kwargs:\n        if \"style\" not in kwargs:\n            style_dict = {\n                # \"stroke\": True,\n                \"color\": \"#3388ff\",\n                \"weight\": 2,\n                \"opacity\": 1,\n                # \"fill\": True,\n                # \"fillColor\": \"#ffffff\",\n                \"fillOpacity\": 0,\n                # \"dashArray\": \"9\"\n                # \"clickable\": True,\n            }\n            kwargs[\"style_function\"] = lambda x: style_dict\n        else:\n            style_dict = kwargs[\"style\"]\n            kwargs[\"style_function\"] = lambda x: style_dict\n\n    geojson = folium.GeoJson(data=data, name=layer_name, **kwargs)\n    self.add_child(geojson)\n</code></pre>"},{"location":"foliumap/#geomapdemo.foliumap.Map.add_layer","title":"<code>add_layer(self, layer)</code>","text":"<p>Adds a layer to the map</p> <p>Parameters:</p> Name Type Description Default <code>layer</code> <code>TileLayer</code> <p>A TileLayer instance.</p> required Source code in <code>geomapdemo/foliumap.py</code> <pre><code>def add_layer(self, layer):\n    \"\"\"Adds a layer to the map\n    Args:\n        layer (TileLayer): A TileLayer instance.\n    \"\"\"\n    layer.add_to(self)\n</code></pre>"},{"location":"foliumap/#geomapdemo.foliumap.Map.add_layer_control","title":"<code>add_layer_control(self)</code>","text":"<p>Adds a layer control to the map</p> Source code in <code>geomapdemo/foliumap.py</code> <pre><code>def add_layer_control(self):\n    \"\"\"Adds a layer control to the map\"\"\"\n    self.add_child(folium.LayerControl())\n</code></pre>"},{"location":"foliumap/#geomapdemo.foliumap.Map.add_marker","title":"<code>add_marker(self, location, popup, **kwargs)</code>","text":"<p>Adds a marker to the map</p> <p>Parameters:</p> Name Type Description Default <code>location</code> <code>list</code> <p>The location of the marker.</p> required <code>popup</code> <code>str</code> <p>The popup text of the marker.</p> required <code>**kwargs</code> <p>Keyword arguments to be passed to the marker.</p> <code>{}</code> Source code in <code>geomapdemo/foliumap.py</code> <pre><code>def add_marker(self, location, popup, **kwargs):\n    \"\"\"Adds a marker to the map\n    Args:\n        location (list): The location of the marker.\n        popup (str): The popup text of the marker.\n        **kwargs: Keyword arguments to be passed to the marker.\n    \"\"\"\n    marker = folium.Marker(location=location, popup=popup, **kwargs)\n    self.add_child(marker)\n</code></pre>"},{"location":"foliumap/#geomapdemo.foliumap.Map.add_polygon","title":"<code>add_polygon(self, locations, popup='', **kwargs)</code>","text":"<p>Adds a polygon to the map</p> <p>Parameters:</p> Name Type Description Default <code>locations</code> <code>list</code> <p>The locations of the polygon.</p> required <code>popup</code> <code>str</code> <p>The popup text of the polygon.</p> <code>''</code> <code>**kwargs</code> <p>Keyword arguments to be passed to the polygon.</p> <code>{}</code> Source code in <code>geomapdemo/foliumap.py</code> <pre><code>def add_polygon(self, locations, popup=\"\", **kwargs):\n    \"\"\"Adds a polygon to the map\n    Args:\n        locations (list): The locations of the polygon.\n        popup (str): The popup text of the polygon.\n        **kwargs: Keyword arguments to be passed to the polygon.\n    \"\"\"\n    polygon = folium.Polygon(locations=locations, popup=popup, **kwargs)\n    self.add_child(polygon)\n</code></pre>"},{"location":"foliumap/#geomapdemo.foliumap.Map.add_polylines","title":"<code>add_polylines(self, locations, popup='', **kwargs)</code>","text":"<p>Adds a polyline to the map</p> <p>Parameters:</p> Name Type Description Default <code>locations</code> <code>list</code> <p>The locations of the polyline.</p> required <code>popup</code> <code>str</code> <p>The popup text of the polyline.</p> <code>''</code> <code>**kwargs</code> <p>Keyword arguments to be passed to the polyline.</p> <code>{}</code> Source code in <code>geomapdemo/foliumap.py</code> <pre><code>def add_polylines(self, locations, popup=\"\", **kwargs):\n    \"\"\"Adds a polyline to the map\n    Args:\n        locations (list): The locations of the polyline.\n        popup (str): The popup text of the polyline.\n        **kwargs: Keyword arguments to be passed to the polyline.\n    \"\"\"\n    polyline = folium.PolyLine(locations=locations, popup=popup, **kwargs)\n    self.add_child(polyline)\n</code></pre>"},{"location":"foliumap/#geomapdemo.foliumap.Map.add_shp","title":"<code>add_shp(self, path, name='Shapefile', **kwargs)</code>","text":"<p>Adds a shapefile to the map</p> <p>Parameters:</p> Name Type Description Default <code>path</code> <code>str</code> <p>The path to the shapefile.</p> required <code>name</code> <code>str</code> <p>The name of the shapefile. Defaults to 'Shapefile'.</p> <code>'Shapefile'</code> <code>**kwargs</code> <p>Keyword arguments to be passed to the shapefile.</p> <code>{}</code> Source code in <code>geomapdemo/foliumap.py</code> <pre><code>def add_shp(self, path, name=\"Shapefile\", **kwargs):\n    \"\"\"Adds a shapefile to the map\n    Args:\n        path (str): The path to the shapefile.\n        name (str, optional): The name of the shapefile. Defaults to 'Shapefile'.\n        **kwargs: Keyword arguments to be passed to the shapefile.\n    \"\"\"\n    import geopandas as gpd\n\n    gdf = gpd.read_file(path)\n    geojson = gdf.__geo_interface__\n    json = folium.GeoJson(data=geojson, name=name, **kwargs)\n    self.add_child(json)\n</code></pre>"},{"location":"foliumap/#geomapdemo.foliumap.Map.add_tile_layer","title":"<code>add_tile_layer(self, url, name, attribution=' ', **kwargs)</code>","text":"<p>Adds a tile layer to the map</p> <p>Parameters:</p> Name Type Description Default <code>url</code> <code>str</code> <p>The url of the tile layer.</p> required <code>name</code> <code>str</code> <p>The name of the tile layer.</p> required <code>attribution</code> <code>str</code> <p>The attribution of the tile layer. Defaults to \"\".</p> <code>' '</code> <code>**kwargs</code> <p>Keyword arguments to be passed to the tile layer.</p> <code>{}</code> Source code in <code>geomapdemo/foliumap.py</code> <pre><code>def add_tile_layer(self, url, name, attribution=\" \", **kwargs):\n    \"\"\"Adds a tile layer to the map\n    Args:\n        url (str): The url of the tile layer.\n        name (str): The name of the tile layer.\n        attribution (str, optional): The attribution of the tile layer. Defaults to \"\".\n        **kwargs: Keyword arguments to be passed to the tile layer.\n    \"\"\"\n    tile_layer = folium.TileLayer(tiles=url, name=name, attr=attribution, **kwargs)\n    self.add_child(tile_layer)\n</code></pre>"},{"location":"foliumap/#geomapdemo.foliumap.Map.click_for_marker","title":"<code>click_for_marker(self, popup='click Point')</code>","text":"<p>Adds a click listener to the map to add markers.</p> <p>Parameters:</p> Name Type Description Default <code>popup</code> <code>str</code> <p>The popup text of the marker. Defaults to \"click Point\".</p> <code>'click Point'</code> Source code in <code>geomapdemo/foliumap.py</code> <pre><code>def click_for_marker(self, popup=\"click Point\"):\n    \"\"\"Adds a click listener to the map to add markers.\n    Args:\n        popup (str): The popup text of the marker. Defaults to \"click Point\".\n    \"\"\"\n    self.add_child(folium.ClickForMarker(popup=popup))\n</code></pre>"},{"location":"foliumap/#geomapdemo.foliumap.Map.export","title":"<code>export(self, outfile='map.html')</code>","text":"<p>Saves the map to a file</p> <p>Parameters:</p> Name Type Description Default <code>outfile</code> <code>str</code> <p>The output file path to the HTML file. Defaults to \"map.html\".</p> <code>'map.html'</code> Source code in <code>geomapdemo/foliumap.py</code> <pre><code>def export(self, outfile=\"map.html\"):\n    \"\"\"Saves the map to a file\n    Args:\n        outfile (str, optional): The output file path to the HTML file. Defaults to \"map.html\".\n    \"\"\"\n    self.save(outfile)\n</code></pre>"},{"location":"foliumap/#geomapdemo.foliumap.Map.set_center","title":"<code>set_center(self, lat, lon, zoom=10)</code>","text":"<p>Sets the center of the map</p> <p>Parameters:</p> Name Type Description Default <code>lat</code> <code>float</code> <p>The latitude of the center.</p> required <code>lon</code> <code>float</code> <p>The longitude of the center.</p> required <code>zoom</code> <code>int</code> <p>The zoom level. Defaults to 10.</p> <code>10</code> Source code in <code>geomapdemo/foliumap.py</code> <pre><code>def set_center(self, lat, lon, zoom=10):\n    \"\"\"Sets the center of the map\n    Args:\n        lat (float): The latitude of the center.\n        lon (float): The longitude of the center.\n        zoom (int): The zoom level. Defaults to 10.\n    \"\"\"\n    self.fit_bounds([[lat, lon], [lat, lon]], max_zoom=zoom)\n</code></pre>"},{"location":"geomapdemo/","title":"geomapdemo module","text":"<p>Main module.</p>"},{"location":"geomapdemo/#geomapdemo.geomapdemo.Map","title":"<code> Map            (Map)         </code>","text":"Source code in <code>geomapdemo/geomapdemo.py</code> <pre><code>class Map(ipyleaflet.Map):\n\n    def __init__(self, center=[40, -100], zoom=4, **kwargs) -&gt; None:\n        \"\"\"Initializes the map\n        Args:\n            center (tuple): The center of the map. e.g [lat, lon]. Defaults to [40, -100].\n            zoom (int): The zoom level of the map. Defaults to 4.\n            **kwargs: Keyword arguments to be passed to the map.\n        \"\"\"\n        if \"scroll_wheel_zoom\" not in kwargs:\n            \"\"\"Enables scroll wheel zoom by default\"\"\"\n            kwargs[\"scroll_wheel_zoom\"] = True\n\n        if \"layers_control\" not in kwargs:\n            \"\"\"Adds a layers control by default\"\"\"\n            kwargs[\"layers_control\"] = True\n\n        if kwargs[\"layers_control\"]:\n            \"\"\"Adds a layers control to the map\"\"\"\n            self.add_layers_control()\n        super().__init__(center=center, zoom=zoom, **kwargs)\n\n        if \"fullscreen_control\" not in kwargs:\n            \"\"\"Adds a fullscreen control by default\"\"\"\n            kwargs[\"fullscreen_control\"] = True\n\n        if kwargs[\"fullscreen_control\"]:\n            \"\"\"Adds a fullscreen control to the map\"\"\"\n            self.add_fullscreen_control()\n\n        if \"search_control\" not in kwargs:\n            \"\"\"Adds a search control by default\"\"\"\n            kwargs[\"search_control\"] = True\n\n        if kwargs[\"search_control\"]:\n            \"\"\"Adds a search control to the map\"\"\"\n            self.add_search_control()\n\n        if \"scale_control\" not in kwargs:\n            \"\"\"Adds a scale control by default\"\"\"\n            kwargs[\"scale_control\"] = True\n\n        if kwargs[\"scale_control\"]:\n            \"\"\"Adds a scale control to the map\"\"\"\n            self.add_scale_control()\n\n        if \"height\" in kwargs:\n            \"\"\"Sets the height of the map\"\"\"\n            self.layout.height = kwargs[\"height\"]\n        else:\n            \"\"\"Sets the default height of the map\"\"\"\n            kwargs[\"height\"] = \"600px\"\n\n    def add_basemap(self, basemap, **kwargs):\n        \"\"\"Adds a basemap to the map\n        Args:\n            basemap(str): The name of basemap.\n            **kwargs: Keyword arguments to be passed to the basemap.\n        \"\"\"\n\n        import xyzservices.providers as xyz\n\n        if basemap.lower() == \"roadmap\":\n            url = \"http://mt0.google.com/vt/lyrs=m&amp;hl=en&amp;x={x}&amp;y={y}&amp;z={z}\"\n            self.add_tile_layer(url, basemap, **kwargs)\n\n        elif basemap.lower() == \"satellite\":\n            url = \"http://mt0.google.com/vt/lyrs=s&amp;hl=en&amp;x={x}&amp;y={y}&amp;z={z}\"\n            self.add_tile_layer(url, basemap, **kwargs)\n\n        elif basemap.lower() == \"esri\":\n            url = \"https://server.arcgisonline.com/ArcGIS/rest/services/World_Imagery/MapServer/tile/{z}/{y}/{x}\"\n            self.add_tile_layer(url, basemap, **kwargs)\n\n        else:\n            try:\n                basemap = eval(f\"xyz.{basemap}\")\n                url = basemap.build_url()\n                attribution = basemap.attribution\n                self.add_tile_layer(\n                    url, name=basemap.name, attribution=attribution, **kwargs\n                )\n            except:\n                raise ValueError(f\"{basemap} is not a valid basemap\")\n\n    def add_tile_layer(self, url, name, attribution=\"\", **kwargs):\n        \"\"\"Adds a tile layer to the map\n        Args:\n            url (str): The url of the tile layer.\n            name (str): The name of the tile layer.\n            attribution (str, optional): The attribution of the tile layer. Defaults to \"\".\n            **kwargs: Keyword arguments to be passed to the tile layer.\n        \"\"\"\n        tile_layer = ipyleaflet.TileLayer(\n            url=url, name=name, attribution=attribution, **kwargs\n        )\n        self.add_layer(tile_layer)\n\n    def add_layers_control(self, position=\"topright\", **kwargs):\n        \"\"\"Adds a layers control to the map\n        Args:\n            position (str, optional): The position of the layers control. Defaults to \"topright\".\n            **kwargs: Keyword arguments to be passed to the layers control.\n        \"\"\"\n        layers_control = ipyleaflet.LayersControl(position=position, **kwargs)\n        self.add_control(layers_control)\n\n    def add_fullscreen_control(self, position=\"topleft\", **kwargs):\n        \"\"\"Adds a fullscreen control to the map\n        Args:\n            position (str, optional): The position of the fullscreen control. Defaults to \"topleft\".\n            **kwargs: Keyword arguments to be passed to the fullscreen control.\n        \"\"\"\n        fullscreen_control = ipyleaflet.FullScreenControl(position=position, **kwargs)\n        self.add_control(fullscreen_control)\n\n    def add_search_control(self, position=\"topleft\", **kwargs):\n        \"\"\"Adds a search control to the map\n        Args:\n            position (str, optional): The position of the search control. Defaults to \"topleft\".\n            **kwargs: Keyword arguments to be passed to the search control.\n        \"\"\"\n        if \"url\" not in kwargs:\n            \"\"\"Sets the default url for the search control\"\"\"\n            kwargs[\"url\"] = (\n                \"https://nominatim.openstreetmap.org/search?format=json&amp;q={s}\"\n            )\n        search_control = ipyleaflet.SearchControl(position=position, **kwargs)\n        self.add_control(search_control)\n\n    def add_draw_control(self, **kwargs):\n        \"\"\"Adds a draw control to the map\n        Args:\n            **kwargs: Keyword arguments to be passed to the draw control.\n        \"\"\"\n        draw_control = ipyleaflet.DrawControl(**kwargs)\n\n        draw_control.polyline = {\n            \"shapeOptions\": {\"color\": \"#6bc2e5\", \"weight\": 8, \"opacity\": 1.0}\n        }\n        draw_control.polygon = {\n            \"shapeOptions\": {\n                \"fillColor\": \"#6be5c3\",\n                \"color\": \"#6be5c3\",\n                \"fillOpacity\": 1.0,\n            },\n            \"drawError\": {\"color\": \"#dd253b\", \"message\": \"Oups!\"},\n            \"allowIntersection\": False,\n        }\n        draw_control.circle = {\n            \"shapeOptions\": {\n                \"fillColor\": \"#efed69\",\n                \"color\": \"#efed69\",\n                \"fillOpacity\": 1.0,\n            }\n        }\n        draw_control.rectangle = {\n            \"shapeOptions\": {\n                \"fillColor\": \"#fca45d\",\n                \"color\": \"#fca45d\",\n                \"fillOpacity\": 1.0,\n            }\n        }\n        self.add_control(draw_control)\n\n    def add_measure_control(\n        self, position=\"bottomleft\", primary_length_unit=\"kilometers\", **kwargs\n    ):\n        \"\"\"Adds a measure control to the map\n        Args:\n            position (str, optional): The position of the measure control. Defaults to 'bottomleft'.\n            primary_length_unit (str, optional): The primary length unit of the measure control. Defaults to 'kilometers'.\n            **kwargs: Keyword arguments to be passed to the measure control.\n        \"\"\"\n        measure_control = ipyleaflet.MeasureControl(\n            position=position, primary_length_unit=primary_length_unit, **kwargs\n        )\n        self.add_control(measure_control)\n\n    def add_scale_control(self, position=\"bottomleft\", **kwargs):\n        \"\"\"Adds a scale control to the map\n        Args:\n            position (str, optional): The position of the scale control. Defaults to 'bottomleft'.\n            **kwargs: Keyword arguments to be passed to the scale control.\n        \"\"\"\n        scale_control = ipyleaflet.ScaleControl(position=position, **kwargs)\n        self.add_control(scale_control)\n\n    def add_geojson(self, data, name=\"GeoJson\", **kwargs):\n        \"\"\"Adds a geojson to the map\n        Args:\n            data (dict): The geojson data.\n            name (str, optional): The name of the geojson. Defaults to 'GeoJson'.\n            **kwargs: Keyword arguments to be passed to the geojson.\n        \"\"\"\n        if isinstance(data, str):\n            \"\"\"If the data is a string, it is assumed to be a path to a geojson file\"\"\"\n            import json\n\n            with open(data, \"r\") as f:\n                data = json.load(f)\n\n        geojson = ipyleaflet.GeoJSON(data=data, name=name, **kwargs)\n        self.add_layer(geojson)\n\n    def add_shp(self, path, name=\"Shapefile\", **kwargs):\n        \"\"\"Adds a shapefile to the map\n        Args:\n            path (str): The path to the shapefile.\n            name (str, optional): The name of the shapefile. Defaults to 'Shapefile'.\n            **kwargs: Keyword arguments to be passed to the shapefile.\n        \"\"\"\n        import geopandas as gpd\n\n        gdf = gpd.read_file(path)\n        geojson = gdf.__geo_interface__\n        self.add_geojson(geojson, name=name, **kwargs)\n\n    def add_markers(self, center, draggable=False, **kwargs):\n        \"\"\"Adds markers to the map\n        Args:\n            center (tuple| list): The center of the markers.\n            draggable (bool, optional): Whether the markers are draggable. Defaults to False.\n            **kwargs: Keyword arguments to be passed to the markers.\n        \"\"\"\n        if isinstance(center, list):\n            center = tuple(center)\n        if isinstance(center, tuple):\n            marker = ipyleaflet.Marker(location=center, draggable=draggable, **kwargs)\n            self.add_layer(marker)\n        else:\n            raise TypeError(\"The center must be a tuple or a list\")\n\n    def add_raster(self, url, name=\"Raster\", fit_bounds=True, **kwargs):\n        \"\"\"Adds a raster to the map\n        Args:\n            url (str): The url of the raster.\n            name (str, optional): The name of the raster. Defaults to 'Raster'.\n            fit_bounds (bool, optional): Whether to fit the bounds of the raster. Defaults to True.\n            **kwargs: Keyword arguments to be passed to the raster.\n        \"\"\"\n        import httpx\n\n        titiler_endpoint = \"https://titiler.xyz\"\n        r = httpx.get(\n            f\"{titiler_endpoint}/cog/info\",\n            params={\n                \"url\": url,\n            },\n        ).json()\n\n        bounds = r[\"bounds\"]\n\n        r = httpx.get(\n            f\"{titiler_endpoint}/cog/tilejson.json\",\n            params={\n                \"url\": url,\n            },\n        ).json()\n\n        tile = r[\"tiles\"][0]\n\n        self.add_tile_layer(url=tile, name=name, **kwargs)\n\n        if fit_bounds:\n            bbox = [[bounds[1], bounds[0]], [bounds[3], bounds[2]]]\n            self.fit_bounds(bbox)\n\n    def add_local_raster(self, filepath, **kwargs):\n        \"\"\"Adds a local raster to the map\n        Args:\n            filepath (str): The path to the raster.\n            **kwargs: Keyword arguments to be passed to the raster.\n        \"\"\"\n        try:\n            from localtileserver import get_leaflet_tile_layer, TileClient\n\n            client = TileClient(filepath)\n            tile_layer = get_leaflet_tile_layer(client)\n            self.add_layer(tile_layer, **kwargs)\n        except:\n            raise ImportError(\"Please install localtileserver\")\n\n    def add_opacity_control(self, value, min, max, **kwargs):\n        \"\"\"Adds an opacity control to the map\n        Args:\n            value (float): The initial value of the opacity control.\n            min (float): The minimum value of the opacity control.\n            max (float): The maximum value of the opacity control.\n            **kwargs: Keyword arguments to be passed to the opacity control.\n        \"\"\"\n        slider = widgets.FloatSlider(value=value, min=min, max=max, **kwargs)\n        widgets.jslink((slider, \"value\"), (self.layers[-1], \"opacity\"))\n        control = ipyleaflet.WidgetControl(widget=slider, position=\"bottomright\")\n        self.add_control(control)\n\n    def add_custom_html(self, html, position=\"bottomright\"):\n        \"\"\"Adds custom HTML to the map\n        Args:\n            html (str): The HTML string.\n            position (str, optional): The position of the HTML. Defaults to 'bottomright'.\n        \"\"\"\n        from ipyleaflet import WidgetControl\n\n        control = WidgetControl(widget=widgets.HTML(html), position=position)\n        self.add_control(control)\n\n    def add_logo(self, url, width=100, height=100, position=\"bottomright\"):\n        \"\"\"Adds a logo to the map\n        Args:\n            url (str): The url of the logo.\n            width (int, optional): The width of the logo. Defaults to 100.\n            height (int, optional): The height of the logo. Defaults to 100.\n            position (str, optional): The position of the logo. Defaults to 'bottomright'.\n        \"\"\"\n        from ipyleaflet import WidgetControl\n\n        logo = widgets.HTML(\n            f'&lt;img src=\"{url}\" alt=\"Logo\" width=\"{width}\" height=\"{height}\"&gt;'\n        )\n        control = WidgetControl(widget=logo, position=position)\n        self.add_control(control)\n\n    def add_toolbar(self, position=\"topright\", widget_width=\"250px\"):\n        \"\"\"adds a toolbar to the map\n        Args:\n            position (str, optional): The position of the toolbar. Defaults to 'topright'.\n            widget_width (str, optional): The width of the toolbar. Defaults to '250px'.\n        \"\"\"\n\n        from ipyleaflet import WidgetControl\n\n        padding = \"0px 0px 0px 4px\"\n\n        toolbar_button = widgets.ToggleButton(\n            value=False,\n            tooltip=\"Toolbar\",\n            icon=\"wrench\",\n            button_style=\"primary\",\n            layout=widgets.Layout(width=\"28px\", height=\"28px\", padding=padding),\n        )\n\n        close_button = widgets.ToggleButton(\n            value=False,\n            tooltip=\"Close\",\n            icon=\"times\",\n            button_style=\"warning\",\n            layout=widgets.Layout(width=\"28px\", height=\"28px\", padding=padding),\n        )\n\n        int_slider = widgets.IntSlider(\n            value=4,\n            min=1,\n            max=24,\n            description=\"Zoom level: \",\n            readout=True,\n            continuous_update=True,\n            layout=widgets.Layout(width=widget_width, padding=padding),\n            style={\"description_width\": \"initial\"},\n        )\n        widgets.jslink((self, \"zoom\"), (int_slider, \"value\"))\n        toolbar_widget = widgets.VBox()\n        toolbar_widget.children = [\n            widgets.HBox([close_button, toolbar_button]),\n            int_slider,\n        ]\n        toolbar_control = WidgetControl(widget=toolbar_widget, position=position)\n        self.add_control(toolbar_control)\n\n    def export(self, filepath=\"map.html\", close_map=True):\n        \"\"\"Exports the map to an HTML file\n        Args:\n            filepath (str): The output filepath. Defaults to 'map.html'.\n            close_map (bool, optional): Whether to close the map after exporting. Defaults to True.\n        \"\"\"\n        import time\n        from ipywidgets.embed import embed_minimal_html\n\n        time.sleep(1)\n        embed_minimal_html(fp=filepath, views=[self], title=\"Map\")\n        if close_map:\n            self.close()\n\n    def add_linked_map(self, zoom=4, position=\"bottomright\"):\n        \"\"\"Adds a linked map to the map\n        Args:\n            zoom (int, optional): The zoom level of the linked map. Defaults to 4.\n            position (str, optional): The position of the linked map. Defaults to \"bottomright\".\n        \"\"\"\n\n        from ipyleaflet import WidgetControl\n\n        minimap = ipyleaflet.Map(\n            zoom_control=False,\n            attribution_control=False,\n            zoom=zoom,\n            center=self.center,\n            layers=[self.layers[0]],\n        )\n        minimap.layout.width = \"150px\"\n        minimap.layout.height = \"150px\"\n        ipyleaflet.link((minimap, \"center\"), (self, \"center\"))\n        minimap_control = WidgetControl(widget=minimap, position=position)\n        self.add_control(minimap_control)\n\n    def add_XY_points_layer(self, data, x, y, **kwargs):\n        \"\"\"Adds a XY points layer to the map\n        Args:\n            data (geopandas.GeoDataFrame|CSV): The input geodataframe.\n            x (str): The name of the x column.\n            y (str): The name of the y column.\n            **kwargs: Keyword arguments to be passed to the ipyleaflet.MarkerCluster.\n        \"\"\"\n        import geopandas as gpd\n\n        if isinstance(data, gpd.GeoDataFrame):\n            df = data\n            self.add_gdf(gdf=df)\n        elif isinstance(data, str):\n            import pandas as pd\n\n            df = pd.read_csv(data)\n\n            # Extract the x and y coordinates from the DataFrame\n            x_values = df[x]\n            y_values = df[y]\n\n            # Create a list of markers based on the coordinates\n            markers = []\n            for x, y in zip(x_values, y_values):\n                mark = ipyleaflet.Marker(location=(y, x))\n                markers.append(mark)\n\n            # Create a marker cluster layer and add it to the map\n            marker_cluster = ipyleaflet.MarkerCluster(markers=markers)\n            self.add_layer(marker_cluster)\n\n        else:\n            raise ValueError(\"The data must be a geodataframe or a csv file path\")\n\n    def add_gdf(self, gdf):\n        \"\"\"Adds a GeoDataFrame to the map\n        Args:\n            data (geopandas.GeoDataFrame): The input geodataframe.\n        \"\"\"\n        import geopandas as gpd\n\n        if isinstance(gdf, gpd.GeoDataFrame):\n            self.add_layer(ipyleaflet.GeoData(geo_dataframe=gdf))\n        else:\n            raise ValueError(\"The data must be a geodataframe\")\n\n    def add_vector(self, filepath, **kwargs):\n        \"\"\"Adds a vector file to the map\n        Args:\n            filepath (str): The path to the vector file.\n            **kwargs: Keyword arguments to be passed to the ipyleaflet.GeoData.\n        \"\"\"\n        import geopandas as gpd\n\n        gdf = gpd.read_file(filepath)\n        self.add_gdf(gdf=gdf, **kwargs)\n</code></pre>"},{"location":"geomapdemo/#geomapdemo.geomapdemo.Map.__init__","title":"<code>__init__(self, center=[40, -100], zoom=4, **kwargs)</code>  <code>special</code>","text":"<p>Initializes the map</p> <p>Parameters:</p> Name Type Description Default <code>center</code> <code>tuple</code> <p>The center of the map. e.g [lat, lon]. Defaults to [40, -100].</p> <code>[40, -100]</code> <code>zoom</code> <code>int</code> <p>The zoom level of the map. Defaults to 4.</p> <code>4</code> <code>**kwargs</code> <p>Keyword arguments to be passed to the map.</p> <code>{}</code> Source code in <code>geomapdemo/geomapdemo.py</code> <pre><code>def __init__(self, center=[40, -100], zoom=4, **kwargs) -&gt; None:\n    \"\"\"Initializes the map\n    Args:\n        center (tuple): The center of the map. e.g [lat, lon]. Defaults to [40, -100].\n        zoom (int): The zoom level of the map. Defaults to 4.\n        **kwargs: Keyword arguments to be passed to the map.\n    \"\"\"\n    if \"scroll_wheel_zoom\" not in kwargs:\n        \"\"\"Enables scroll wheel zoom by default\"\"\"\n        kwargs[\"scroll_wheel_zoom\"] = True\n\n    if \"layers_control\" not in kwargs:\n        \"\"\"Adds a layers control by default\"\"\"\n        kwargs[\"layers_control\"] = True\n\n    if kwargs[\"layers_control\"]:\n        \"\"\"Adds a layers control to the map\"\"\"\n        self.add_layers_control()\n    super().__init__(center=center, zoom=zoom, **kwargs)\n\n    if \"fullscreen_control\" not in kwargs:\n        \"\"\"Adds a fullscreen control by default\"\"\"\n        kwargs[\"fullscreen_control\"] = True\n\n    if kwargs[\"fullscreen_control\"]:\n        \"\"\"Adds a fullscreen control to the map\"\"\"\n        self.add_fullscreen_control()\n\n    if \"search_control\" not in kwargs:\n        \"\"\"Adds a search control by default\"\"\"\n        kwargs[\"search_control\"] = True\n\n    if kwargs[\"search_control\"]:\n        \"\"\"Adds a search control to the map\"\"\"\n        self.add_search_control()\n\n    if \"scale_control\" not in kwargs:\n        \"\"\"Adds a scale control by default\"\"\"\n        kwargs[\"scale_control\"] = True\n\n    if kwargs[\"scale_control\"]:\n        \"\"\"Adds a scale control to the map\"\"\"\n        self.add_scale_control()\n\n    if \"height\" in kwargs:\n        \"\"\"Sets the height of the map\"\"\"\n        self.layout.height = kwargs[\"height\"]\n    else:\n        \"\"\"Sets the default height of the map\"\"\"\n        kwargs[\"height\"] = \"600px\"\n</code></pre>"},{"location":"geomapdemo/#geomapdemo.geomapdemo.Map.add_XY_points_layer","title":"<code>add_XY_points_layer(self, data, x, y, **kwargs)</code>","text":"<p>Adds a XY points layer to the map</p> <p>Parameters:</p> Name Type Description Default <code>data</code> <code>geopandas.GeoDataFrame|CSV</code> <p>The input geodataframe.</p> required <code>x</code> <code>str</code> <p>The name of the x column.</p> required <code>y</code> <code>str</code> <p>The name of the y column.</p> required <code>**kwargs</code> <p>Keyword arguments to be passed to the ipyleaflet.MarkerCluster.</p> <code>{}</code> Source code in <code>geomapdemo/geomapdemo.py</code> <pre><code>def add_XY_points_layer(self, data, x, y, **kwargs):\n    \"\"\"Adds a XY points layer to the map\n    Args:\n        data (geopandas.GeoDataFrame|CSV): The input geodataframe.\n        x (str): The name of the x column.\n        y (str): The name of the y column.\n        **kwargs: Keyword arguments to be passed to the ipyleaflet.MarkerCluster.\n    \"\"\"\n    import geopandas as gpd\n\n    if isinstance(data, gpd.GeoDataFrame):\n        df = data\n        self.add_gdf(gdf=df)\n    elif isinstance(data, str):\n        import pandas as pd\n\n        df = pd.read_csv(data)\n\n        # Extract the x and y coordinates from the DataFrame\n        x_values = df[x]\n        y_values = df[y]\n\n        # Create a list of markers based on the coordinates\n        markers = []\n        for x, y in zip(x_values, y_values):\n            mark = ipyleaflet.Marker(location=(y, x))\n            markers.append(mark)\n\n        # Create a marker cluster layer and add it to the map\n        marker_cluster = ipyleaflet.MarkerCluster(markers=markers)\n        self.add_layer(marker_cluster)\n\n    else:\n        raise ValueError(\"The data must be a geodataframe or a csv file path\")\n</code></pre>"},{"location":"geomapdemo/#geomapdemo.geomapdemo.Map.add_basemap","title":"<code>add_basemap(self, basemap, **kwargs)</code>","text":"<p>Adds a basemap to the map</p> <p>Parameters:</p> Name Type Description Default <code>basemap(str)</code> <p>The name of basemap.</p> required <code>**kwargs</code> <p>Keyword arguments to be passed to the basemap.</p> <code>{}</code> Source code in <code>geomapdemo/geomapdemo.py</code> <pre><code>def add_basemap(self, basemap, **kwargs):\n    \"\"\"Adds a basemap to the map\n    Args:\n        basemap(str): The name of basemap.\n        **kwargs: Keyword arguments to be passed to the basemap.\n    \"\"\"\n\n    import xyzservices.providers as xyz\n\n    if basemap.lower() == \"roadmap\":\n        url = \"http://mt0.google.com/vt/lyrs=m&amp;hl=en&amp;x={x}&amp;y={y}&amp;z={z}\"\n        self.add_tile_layer(url, basemap, **kwargs)\n\n    elif basemap.lower() == \"satellite\":\n        url = \"http://mt0.google.com/vt/lyrs=s&amp;hl=en&amp;x={x}&amp;y={y}&amp;z={z}\"\n        self.add_tile_layer(url, basemap, **kwargs)\n\n    elif basemap.lower() == \"esri\":\n        url = \"https://server.arcgisonline.com/ArcGIS/rest/services/World_Imagery/MapServer/tile/{z}/{y}/{x}\"\n        self.add_tile_layer(url, basemap, **kwargs)\n\n    else:\n        try:\n            basemap = eval(f\"xyz.{basemap}\")\n            url = basemap.build_url()\n            attribution = basemap.attribution\n            self.add_tile_layer(\n                url, name=basemap.name, attribution=attribution, **kwargs\n            )\n        except:\n            raise ValueError(f\"{basemap} is not a valid basemap\")\n</code></pre>"},{"location":"geomapdemo/#geomapdemo.geomapdemo.Map.add_custom_html","title":"<code>add_custom_html(self, html, position='bottomright')</code>","text":"<p>Adds custom HTML to the map</p> <p>Parameters:</p> Name Type Description Default <code>html</code> <code>str</code> <p>The HTML string.</p> required <code>position</code> <code>str</code> <p>The position of the HTML. Defaults to 'bottomright'.</p> <code>'bottomright'</code> Source code in <code>geomapdemo/geomapdemo.py</code> <pre><code>def add_custom_html(self, html, position=\"bottomright\"):\n    \"\"\"Adds custom HTML to the map\n    Args:\n        html (str): The HTML string.\n        position (str, optional): The position of the HTML. Defaults to 'bottomright'.\n    \"\"\"\n    from ipyleaflet import WidgetControl\n\n    control = WidgetControl(widget=widgets.HTML(html), position=position)\n    self.add_control(control)\n</code></pre>"},{"location":"geomapdemo/#geomapdemo.geomapdemo.Map.add_draw_control","title":"<code>add_draw_control(self, **kwargs)</code>","text":"<p>Adds a draw control to the map</p> <p>Parameters:</p> Name Type Description Default <code>**kwargs</code> <p>Keyword arguments to be passed to the draw control.</p> <code>{}</code> Source code in <code>geomapdemo/geomapdemo.py</code> <pre><code>def add_draw_control(self, **kwargs):\n    \"\"\"Adds a draw control to the map\n    Args:\n        **kwargs: Keyword arguments to be passed to the draw control.\n    \"\"\"\n    draw_control = ipyleaflet.DrawControl(**kwargs)\n\n    draw_control.polyline = {\n        \"shapeOptions\": {\"color\": \"#6bc2e5\", \"weight\": 8, \"opacity\": 1.0}\n    }\n    draw_control.polygon = {\n        \"shapeOptions\": {\n            \"fillColor\": \"#6be5c3\",\n            \"color\": \"#6be5c3\",\n            \"fillOpacity\": 1.0,\n        },\n        \"drawError\": {\"color\": \"#dd253b\", \"message\": \"Oups!\"},\n        \"allowIntersection\": False,\n    }\n    draw_control.circle = {\n        \"shapeOptions\": {\n            \"fillColor\": \"#efed69\",\n            \"color\": \"#efed69\",\n            \"fillOpacity\": 1.0,\n        }\n    }\n    draw_control.rectangle = {\n        \"shapeOptions\": {\n            \"fillColor\": \"#fca45d\",\n            \"color\": \"#fca45d\",\n            \"fillOpacity\": 1.0,\n        }\n    }\n    self.add_control(draw_control)\n</code></pre>"},{"location":"geomapdemo/#geomapdemo.geomapdemo.Map.add_fullscreen_control","title":"<code>add_fullscreen_control(self, position='topleft', **kwargs)</code>","text":"<p>Adds a fullscreen control to the map</p> <p>Parameters:</p> Name Type Description Default <code>position</code> <code>str</code> <p>The position of the fullscreen control. Defaults to \"topleft\".</p> <code>'topleft'</code> <code>**kwargs</code> <p>Keyword arguments to be passed to the fullscreen control.</p> <code>{}</code> Source code in <code>geomapdemo/geomapdemo.py</code> <pre><code>def add_fullscreen_control(self, position=\"topleft\", **kwargs):\n    \"\"\"Adds a fullscreen control to the map\n    Args:\n        position (str, optional): The position of the fullscreen control. Defaults to \"topleft\".\n        **kwargs: Keyword arguments to be passed to the fullscreen control.\n    \"\"\"\n    fullscreen_control = ipyleaflet.FullScreenControl(position=position, **kwargs)\n    self.add_control(fullscreen_control)\n</code></pre>"},{"location":"geomapdemo/#geomapdemo.geomapdemo.Map.add_gdf","title":"<code>add_gdf(self, gdf)</code>","text":"<p>Adds a GeoDataFrame to the map</p> <p>Parameters:</p> Name Type Description Default <code>data</code> <code>geopandas.GeoDataFrame</code> <p>The input geodataframe.</p> required Source code in <code>geomapdemo/geomapdemo.py</code> <pre><code>def add_gdf(self, gdf):\n    \"\"\"Adds a GeoDataFrame to the map\n    Args:\n        data (geopandas.GeoDataFrame): The input geodataframe.\n    \"\"\"\n    import geopandas as gpd\n\n    if isinstance(gdf, gpd.GeoDataFrame):\n        self.add_layer(ipyleaflet.GeoData(geo_dataframe=gdf))\n    else:\n        raise ValueError(\"The data must be a geodataframe\")\n</code></pre>"},{"location":"geomapdemo/#geomapdemo.geomapdemo.Map.add_geojson","title":"<code>add_geojson(self, data, name='GeoJson', **kwargs)</code>","text":"<p>Adds a geojson to the map</p> <p>Parameters:</p> Name Type Description Default <code>data</code> <code>dict</code> <p>The geojson data.</p> required <code>name</code> <code>str</code> <p>The name of the geojson. Defaults to 'GeoJson'.</p> <code>'GeoJson'</code> <code>**kwargs</code> <p>Keyword arguments to be passed to the geojson.</p> <code>{}</code> Source code in <code>geomapdemo/geomapdemo.py</code> <pre><code>def add_geojson(self, data, name=\"GeoJson\", **kwargs):\n    \"\"\"Adds a geojson to the map\n    Args:\n        data (dict): The geojson data.\n        name (str, optional): The name of the geojson. Defaults to 'GeoJson'.\n        **kwargs: Keyword arguments to be passed to the geojson.\n    \"\"\"\n    if isinstance(data, str):\n        \"\"\"If the data is a string, it is assumed to be a path to a geojson file\"\"\"\n        import json\n\n        with open(data, \"r\") as f:\n            data = json.load(f)\n\n    geojson = ipyleaflet.GeoJSON(data=data, name=name, **kwargs)\n    self.add_layer(geojson)\n</code></pre>"},{"location":"geomapdemo/#geomapdemo.geomapdemo.Map.add_layers_control","title":"<code>add_layers_control(self, position='topright', **kwargs)</code>","text":"<p>Adds a layers control to the map</p> <p>Parameters:</p> Name Type Description Default <code>position</code> <code>str</code> <p>The position of the layers control. Defaults to \"topright\".</p> <code>'topright'</code> <code>**kwargs</code> <p>Keyword arguments to be passed to the layers control.</p> <code>{}</code> Source code in <code>geomapdemo/geomapdemo.py</code> <pre><code>def add_layers_control(self, position=\"topright\", **kwargs):\n    \"\"\"Adds a layers control to the map\n    Args:\n        position (str, optional): The position of the layers control. Defaults to \"topright\".\n        **kwargs: Keyword arguments to be passed to the layers control.\n    \"\"\"\n    layers_control = ipyleaflet.LayersControl(position=position, **kwargs)\n    self.add_control(layers_control)\n</code></pre>"},{"location":"geomapdemo/#geomapdemo.geomapdemo.Map.add_linked_map","title":"<code>add_linked_map(self, zoom=4, position='bottomright')</code>","text":"<p>Adds a linked map to the map</p> <p>Parameters:</p> Name Type Description Default <code>zoom</code> <code>int</code> <p>The zoom level of the linked map. Defaults to 4.</p> <code>4</code> <code>position</code> <code>str</code> <p>The position of the linked map. Defaults to \"bottomright\".</p> <code>'bottomright'</code> Source code in <code>geomapdemo/geomapdemo.py</code> <pre><code>def add_linked_map(self, zoom=4, position=\"bottomright\"):\n    \"\"\"Adds a linked map to the map\n    Args:\n        zoom (int, optional): The zoom level of the linked map. Defaults to 4.\n        position (str, optional): The position of the linked map. Defaults to \"bottomright\".\n    \"\"\"\n\n    from ipyleaflet import WidgetControl\n\n    minimap = ipyleaflet.Map(\n        zoom_control=False,\n        attribution_control=False,\n        zoom=zoom,\n        center=self.center,\n        layers=[self.layers[0]],\n    )\n    minimap.layout.width = \"150px\"\n    minimap.layout.height = \"150px\"\n    ipyleaflet.link((minimap, \"center\"), (self, \"center\"))\n    minimap_control = WidgetControl(widget=minimap, position=position)\n    self.add_control(minimap_control)\n</code></pre>"},{"location":"geomapdemo/#geomapdemo.geomapdemo.Map.add_local_raster","title":"<code>add_local_raster(self, filepath, **kwargs)</code>","text":"<p>Adds a local raster to the map</p> <p>Parameters:</p> Name Type Description Default <code>filepath</code> <code>str</code> <p>The path to the raster.</p> required <code>**kwargs</code> <p>Keyword arguments to be passed to the raster.</p> <code>{}</code> Source code in <code>geomapdemo/geomapdemo.py</code> <pre><code>def add_local_raster(self, filepath, **kwargs):\n    \"\"\"Adds a local raster to the map\n    Args:\n        filepath (str): The path to the raster.\n        **kwargs: Keyword arguments to be passed to the raster.\n    \"\"\"\n    try:\n        from localtileserver import get_leaflet_tile_layer, TileClient\n\n        client = TileClient(filepath)\n        tile_layer = get_leaflet_tile_layer(client)\n        self.add_layer(tile_layer, **kwargs)\n    except:\n        raise ImportError(\"Please install localtileserver\")\n</code></pre>"},{"location":"geomapdemo/#geomapdemo.geomapdemo.Map.add_logo","title":"<code>add_logo(self, url, width=100, height=100, position='bottomright')</code>","text":"<p>Adds a logo to the map</p> <p>Parameters:</p> Name Type Description Default <code>url</code> <code>str</code> <p>The url of the logo.</p> required <code>width</code> <code>int</code> <p>The width of the logo. Defaults to 100.</p> <code>100</code> <code>height</code> <code>int</code> <p>The height of the logo. Defaults to 100.</p> <code>100</code> <code>position</code> <code>str</code> <p>The position of the logo. Defaults to 'bottomright'.</p> <code>'bottomright'</code> Source code in <code>geomapdemo/geomapdemo.py</code> <pre><code>def add_logo(self, url, width=100, height=100, position=\"bottomright\"):\n    \"\"\"Adds a logo to the map\n    Args:\n        url (str): The url of the logo.\n        width (int, optional): The width of the logo. Defaults to 100.\n        height (int, optional): The height of the logo. Defaults to 100.\n        position (str, optional): The position of the logo. Defaults to 'bottomright'.\n    \"\"\"\n    from ipyleaflet import WidgetControl\n\n    logo = widgets.HTML(\n        f'&lt;img src=\"{url}\" alt=\"Logo\" width=\"{width}\" height=\"{height}\"&gt;'\n    )\n    control = WidgetControl(widget=logo, position=position)\n    self.add_control(control)\n</code></pre>"},{"location":"geomapdemo/#geomapdemo.geomapdemo.Map.add_markers","title":"<code>add_markers(self, center, draggable=False, **kwargs)</code>","text":"<p>Adds markers to the map</p> <p>Parameters:</p> Name Type Description Default <code>center</code> <code>tuple| list</code> <p>The center of the markers.</p> required <code>draggable</code> <code>bool</code> <p>Whether the markers are draggable. Defaults to False.</p> <code>False</code> <code>**kwargs</code> <p>Keyword arguments to be passed to the markers.</p> <code>{}</code> Source code in <code>geomapdemo/geomapdemo.py</code> <pre><code>def add_markers(self, center, draggable=False, **kwargs):\n    \"\"\"Adds markers to the map\n    Args:\n        center (tuple| list): The center of the markers.\n        draggable (bool, optional): Whether the markers are draggable. Defaults to False.\n        **kwargs: Keyword arguments to be passed to the markers.\n    \"\"\"\n    if isinstance(center, list):\n        center = tuple(center)\n    if isinstance(center, tuple):\n        marker = ipyleaflet.Marker(location=center, draggable=draggable, **kwargs)\n        self.add_layer(marker)\n    else:\n        raise TypeError(\"The center must be a tuple or a list\")\n</code></pre>"},{"location":"geomapdemo/#geomapdemo.geomapdemo.Map.add_measure_control","title":"<code>add_measure_control(self, position='bottomleft', primary_length_unit='kilometers', **kwargs)</code>","text":"<p>Adds a measure control to the map</p> <p>Parameters:</p> Name Type Description Default <code>position</code> <code>str</code> <p>The position of the measure control. Defaults to 'bottomleft'.</p> <code>'bottomleft'</code> <code>primary_length_unit</code> <code>str</code> <p>The primary length unit of the measure control. Defaults to 'kilometers'.</p> <code>'kilometers'</code> <code>**kwargs</code> <p>Keyword arguments to be passed to the measure control.</p> <code>{}</code> Source code in <code>geomapdemo/geomapdemo.py</code> <pre><code>def add_measure_control(\n    self, position=\"bottomleft\", primary_length_unit=\"kilometers\", **kwargs\n):\n    \"\"\"Adds a measure control to the map\n    Args:\n        position (str, optional): The position of the measure control. Defaults to 'bottomleft'.\n        primary_length_unit (str, optional): The primary length unit of the measure control. Defaults to 'kilometers'.\n        **kwargs: Keyword arguments to be passed to the measure control.\n    \"\"\"\n    measure_control = ipyleaflet.MeasureControl(\n        position=position, primary_length_unit=primary_length_unit, **kwargs\n    )\n    self.add_control(measure_control)\n</code></pre>"},{"location":"geomapdemo/#geomapdemo.geomapdemo.Map.add_opacity_control","title":"<code>add_opacity_control(self, value, min, max, **kwargs)</code>","text":"<p>Adds an opacity control to the map</p> <p>Parameters:</p> Name Type Description Default <code>value</code> <code>float</code> <p>The initial value of the opacity control.</p> required <code>min</code> <code>float</code> <p>The minimum value of the opacity control.</p> required <code>max</code> <code>float</code> <p>The maximum value of the opacity control.</p> required <code>**kwargs</code> <p>Keyword arguments to be passed to the opacity control.</p> <code>{}</code> Source code in <code>geomapdemo/geomapdemo.py</code> <pre><code>def add_opacity_control(self, value, min, max, **kwargs):\n    \"\"\"Adds an opacity control to the map\n    Args:\n        value (float): The initial value of the opacity control.\n        min (float): The minimum value of the opacity control.\n        max (float): The maximum value of the opacity control.\n        **kwargs: Keyword arguments to be passed to the opacity control.\n    \"\"\"\n    slider = widgets.FloatSlider(value=value, min=min, max=max, **kwargs)\n    widgets.jslink((slider, \"value\"), (self.layers[-1], \"opacity\"))\n    control = ipyleaflet.WidgetControl(widget=slider, position=\"bottomright\")\n    self.add_control(control)\n</code></pre>"},{"location":"geomapdemo/#geomapdemo.geomapdemo.Map.add_raster","title":"<code>add_raster(self, url, name='Raster', fit_bounds=True, **kwargs)</code>","text":"<p>Adds a raster to the map</p> <p>Parameters:</p> Name Type Description Default <code>url</code> <code>str</code> <p>The url of the raster.</p> required <code>name</code> <code>str</code> <p>The name of the raster. Defaults to 'Raster'.</p> <code>'Raster'</code> <code>fit_bounds</code> <code>bool</code> <p>Whether to fit the bounds of the raster. Defaults to True.</p> <code>True</code> <code>**kwargs</code> <p>Keyword arguments to be passed to the raster.</p> <code>{}</code> Source code in <code>geomapdemo/geomapdemo.py</code> <pre><code>def add_raster(self, url, name=\"Raster\", fit_bounds=True, **kwargs):\n    \"\"\"Adds a raster to the map\n    Args:\n        url (str): The url of the raster.\n        name (str, optional): The name of the raster. Defaults to 'Raster'.\n        fit_bounds (bool, optional): Whether to fit the bounds of the raster. Defaults to True.\n        **kwargs: Keyword arguments to be passed to the raster.\n    \"\"\"\n    import httpx\n\n    titiler_endpoint = \"https://titiler.xyz\"\n    r = httpx.get(\n        f\"{titiler_endpoint}/cog/info\",\n        params={\n            \"url\": url,\n        },\n    ).json()\n\n    bounds = r[\"bounds\"]\n\n    r = httpx.get(\n        f\"{titiler_endpoint}/cog/tilejson.json\",\n        params={\n            \"url\": url,\n        },\n    ).json()\n\n    tile = r[\"tiles\"][0]\n\n    self.add_tile_layer(url=tile, name=name, **kwargs)\n\n    if fit_bounds:\n        bbox = [[bounds[1], bounds[0]], [bounds[3], bounds[2]]]\n        self.fit_bounds(bbox)\n</code></pre>"},{"location":"geomapdemo/#geomapdemo.geomapdemo.Map.add_scale_control","title":"<code>add_scale_control(self, position='bottomleft', **kwargs)</code>","text":"<p>Adds a scale control to the map</p> <p>Parameters:</p> Name Type Description Default <code>position</code> <code>str</code> <p>The position of the scale control. Defaults to 'bottomleft'.</p> <code>'bottomleft'</code> <code>**kwargs</code> <p>Keyword arguments to be passed to the scale control.</p> <code>{}</code> Source code in <code>geomapdemo/geomapdemo.py</code> <pre><code>def add_scale_control(self, position=\"bottomleft\", **kwargs):\n    \"\"\"Adds a scale control to the map\n    Args:\n        position (str, optional): The position of the scale control. Defaults to 'bottomleft'.\n        **kwargs: Keyword arguments to be passed to the scale control.\n    \"\"\"\n    scale_control = ipyleaflet.ScaleControl(position=position, **kwargs)\n    self.add_control(scale_control)\n</code></pre>"},{"location":"geomapdemo/#geomapdemo.geomapdemo.Map.add_search_control","title":"<code>add_search_control(self, position='topleft', **kwargs)</code>","text":"<p>Adds a search control to the map</p> <p>Parameters:</p> Name Type Description Default <code>position</code> <code>str</code> <p>The position of the search control. Defaults to \"topleft\".</p> <code>'topleft'</code> <code>**kwargs</code> <p>Keyword arguments to be passed to the search control.</p> <code>{}</code> Source code in <code>geomapdemo/geomapdemo.py</code> <pre><code>def add_search_control(self, position=\"topleft\", **kwargs):\n    \"\"\"Adds a search control to the map\n    Args:\n        position (str, optional): The position of the search control. Defaults to \"topleft\".\n        **kwargs: Keyword arguments to be passed to the search control.\n    \"\"\"\n    if \"url\" not in kwargs:\n        \"\"\"Sets the default url for the search control\"\"\"\n        kwargs[\"url\"] = (\n            \"https://nominatim.openstreetmap.org/search?format=json&amp;q={s}\"\n        )\n    search_control = ipyleaflet.SearchControl(position=position, **kwargs)\n    self.add_control(search_control)\n</code></pre>"},{"location":"geomapdemo/#geomapdemo.geomapdemo.Map.add_shp","title":"<code>add_shp(self, path, name='Shapefile', **kwargs)</code>","text":"<p>Adds a shapefile to the map</p> <p>Parameters:</p> Name Type Description Default <code>path</code> <code>str</code> <p>The path to the shapefile.</p> required <code>name</code> <code>str</code> <p>The name of the shapefile. Defaults to 'Shapefile'.</p> <code>'Shapefile'</code> <code>**kwargs</code> <p>Keyword arguments to be passed to the shapefile.</p> <code>{}</code> Source code in <code>geomapdemo/geomapdemo.py</code> <pre><code>def add_shp(self, path, name=\"Shapefile\", **kwargs):\n    \"\"\"Adds a shapefile to the map\n    Args:\n        path (str): The path to the shapefile.\n        name (str, optional): The name of the shapefile. Defaults to 'Shapefile'.\n        **kwargs: Keyword arguments to be passed to the shapefile.\n    \"\"\"\n    import geopandas as gpd\n\n    gdf = gpd.read_file(path)\n    geojson = gdf.__geo_interface__\n    self.add_geojson(geojson, name=name, **kwargs)\n</code></pre>"},{"location":"geomapdemo/#geomapdemo.geomapdemo.Map.add_tile_layer","title":"<code>add_tile_layer(self, url, name, attribution='', **kwargs)</code>","text":"<p>Adds a tile layer to the map</p> <p>Parameters:</p> Name Type Description Default <code>url</code> <code>str</code> <p>The url of the tile layer.</p> required <code>name</code> <code>str</code> <p>The name of the tile layer.</p> required <code>attribution</code> <code>str</code> <p>The attribution of the tile layer. Defaults to \"\".</p> <code>''</code> <code>**kwargs</code> <p>Keyword arguments to be passed to the tile layer.</p> <code>{}</code> Source code in <code>geomapdemo/geomapdemo.py</code> <pre><code>def add_tile_layer(self, url, name, attribution=\"\", **kwargs):\n    \"\"\"Adds a tile layer to the map\n    Args:\n        url (str): The url of the tile layer.\n        name (str): The name of the tile layer.\n        attribution (str, optional): The attribution of the tile layer. Defaults to \"\".\n        **kwargs: Keyword arguments to be passed to the tile layer.\n    \"\"\"\n    tile_layer = ipyleaflet.TileLayer(\n        url=url, name=name, attribution=attribution, **kwargs\n    )\n    self.add_layer(tile_layer)\n</code></pre>"},{"location":"geomapdemo/#geomapdemo.geomapdemo.Map.add_toolbar","title":"<code>add_toolbar(self, position='topright', widget_width='250px')</code>","text":"<p>adds a toolbar to the map</p> <p>Parameters:</p> Name Type Description Default <code>position</code> <code>str</code> <p>The position of the toolbar. Defaults to 'topright'.</p> <code>'topright'</code> <code>widget_width</code> <code>str</code> <p>The width of the toolbar. Defaults to '250px'.</p> <code>'250px'</code> Source code in <code>geomapdemo/geomapdemo.py</code> <pre><code>def add_toolbar(self, position=\"topright\", widget_width=\"250px\"):\n    \"\"\"adds a toolbar to the map\n    Args:\n        position (str, optional): The position of the toolbar. Defaults to 'topright'.\n        widget_width (str, optional): The width of the toolbar. Defaults to '250px'.\n    \"\"\"\n\n    from ipyleaflet import WidgetControl\n\n    padding = \"0px 0px 0px 4px\"\n\n    toolbar_button = widgets.ToggleButton(\n        value=False,\n        tooltip=\"Toolbar\",\n        icon=\"wrench\",\n        button_style=\"primary\",\n        layout=widgets.Layout(width=\"28px\", height=\"28px\", padding=padding),\n    )\n\n    close_button = widgets.ToggleButton(\n        value=False,\n        tooltip=\"Close\",\n        icon=\"times\",\n        button_style=\"warning\",\n        layout=widgets.Layout(width=\"28px\", height=\"28px\", padding=padding),\n    )\n\n    int_slider = widgets.IntSlider(\n        value=4,\n        min=1,\n        max=24,\n        description=\"Zoom level: \",\n        readout=True,\n        continuous_update=True,\n        layout=widgets.Layout(width=widget_width, padding=padding),\n        style={\"description_width\": \"initial\"},\n    )\n    widgets.jslink((self, \"zoom\"), (int_slider, \"value\"))\n    toolbar_widget = widgets.VBox()\n    toolbar_widget.children = [\n        widgets.HBox([close_button, toolbar_button]),\n        int_slider,\n    ]\n    toolbar_control = WidgetControl(widget=toolbar_widget, position=position)\n    self.add_control(toolbar_control)\n</code></pre>"},{"location":"geomapdemo/#geomapdemo.geomapdemo.Map.add_vector","title":"<code>add_vector(self, filepath, **kwargs)</code>","text":"<p>Adds a vector file to the map</p> <p>Parameters:</p> Name Type Description Default <code>filepath</code> <code>str</code> <p>The path to the vector file.</p> required <code>**kwargs</code> <p>Keyword arguments to be passed to the ipyleaflet.GeoData.</p> <code>{}</code> Source code in <code>geomapdemo/geomapdemo.py</code> <pre><code>def add_vector(self, filepath, **kwargs):\n    \"\"\"Adds a vector file to the map\n    Args:\n        filepath (str): The path to the vector file.\n        **kwargs: Keyword arguments to be passed to the ipyleaflet.GeoData.\n    \"\"\"\n    import geopandas as gpd\n\n    gdf = gpd.read_file(filepath)\n    self.add_gdf(gdf=gdf, **kwargs)\n</code></pre>"},{"location":"geomapdemo/#geomapdemo.geomapdemo.Map.export","title":"<code>export(self, filepath='map.html', close_map=True)</code>","text":"<p>Exports the map to an HTML file</p> <p>Parameters:</p> Name Type Description Default <code>filepath</code> <code>str</code> <p>The output filepath. Defaults to 'map.html'.</p> <code>'map.html'</code> <code>close_map</code> <code>bool</code> <p>Whether to close the map after exporting. Defaults to True.</p> <code>True</code> Source code in <code>geomapdemo/geomapdemo.py</code> <pre><code>def export(self, filepath=\"map.html\", close_map=True):\n    \"\"\"Exports the map to an HTML file\n    Args:\n        filepath (str): The output filepath. Defaults to 'map.html'.\n        close_map (bool, optional): Whether to close the map after exporting. Defaults to True.\n    \"\"\"\n    import time\n    from ipywidgets.embed import embed_minimal_html\n\n    time.sleep(1)\n    embed_minimal_html(fp=filepath, views=[self], title=\"Map\")\n    if close_map:\n        self.close()\n</code></pre>"},{"location":"geomapdemo/#geomapdemo.geomapdemo.generate_lucky_number","title":"<code>generate_lucky_number(length=1)</code>","text":"<p>Generates a random number of fixed length</p> <p>Parameters:</p> Name Type Description Default <code>length</code> <code>int</code> <p>the length of the number. Defaults to 1.</p> <code>1</code> <p>Returns:</p> Type Description <code>int</code> <p>The generated number.</p> Source code in <code>geomapdemo/geomapdemo.py</code> <pre><code>def generate_lucky_number(length=1):\n    \"\"\"Generates a random number of fixed length\n\n    Args:\n        length (int, optional): the length of the number. Defaults to 1.\n\n    Returns:\n        int: The generated number.\n    \"\"\"\n    result_str = \"\".join(random.choice(string.digits) for i in range(length))\n    return int(result_str)\n</code></pre>"},{"location":"geomapdemo/#geomapdemo.geomapdemo.generate_random_string","title":"<code>generate_random_string(length=10, upper=False, punctuations=False, digits=False)</code>","text":"<p>Generates a random string of fixed length</p> <p>Parameters:</p> Name Type Description Default <code>length</code> <code>int</code> <p>The length of the string. Defaults to 10.</p> <code>10</code> <code>upper</code> <code>bool</code> <p>Whether to include uppercase letters. Defaults to False.</p> <code>False</code> <code>punctuations</code> <code>bool</code> <p>Whether to include punctuations. Defaults to False.</p> <code>False</code> <code>digits</code> <code>bool</code> <p>Whether to include digits. Defaults to False.</p> <code>False</code> <p>Returns:</p> Type Description <code>str</code> <p>The generated string.</p> Source code in <code>geomapdemo/geomapdemo.py</code> <pre><code>def generate_random_string(length=10, upper=False, punctuations=False, digits=False):\n    \"\"\"Generates a random string of fixed length\n\n    Args:\n        length (int, optional): The length of the string. Defaults to 10.\n        upper (bool, optional): Whether to include uppercase letters. Defaults to False.\n        punctuations (bool, optional):Whether to include punctuations. Defaults to False.\n        digits (bool, optional): Whether to include digits. Defaults to False.\n\n    Returns:\n        str: The generated string.\n    \"\"\"\n    letters = string.ascii_lowercase\n    if upper:\n        letters += string.ascii_uppercase\n    if digits:\n        letters += string.digits\n    if punctuations:\n        letters += string.punctuation\n    result_str = \"\".join(random.choice(letters) for i in range(length))\n    return result_str\n</code></pre>"},{"location":"installation/","title":"Installation","text":""},{"location":"installation/#install-from-pypi-stable-release","title":"Install from PyPI -Stable release","text":"<p>geomapdemo is available on PyPI. To install geomapdemo, run this command in your terminal:</p> <p><pre><code>pip install geomapdemo\n</code></pre> This is the preferred method to install geomapdemo, as it will always install the most recent stable release.</p> <p>If you don't have pip installed, this Python installation guide can guide you through the process.</p>"},{"location":"installation/#install-from-conda-forge","title":"Install from Conda-forge","text":"<p>Package are currently under review! Please stay patient! Thank you very much!</p>"},{"location":"installation/#upgrade-geomapdemo","title":"Upgrade geomapdemo","text":"<p>If you have installed geomapdemo before and want to upgrade to the latest version, you can run the following command in your terminal:</p> <pre><code>pip install -U geomapdemo\n</code></pre>"},{"location":"installation/#from-sources","title":"From sources","text":"<p>The sources for geomapdemo can be downloaded from the Github repo.</p> <p>You can clone the public repository:</p> <pre><code>git clone git://github.com/zyang91/geomapdemo\n</code></pre>"},{"location":"usage/","title":"Usage","text":"<p>Below is a list of some commonly used functions available in the geomapdemo Python package. Please check the API Reference for a complete list of all available functions.</p> <p>To create an ipyleaflet-based interactive map:</p> <pre><code>import geomapdemo\nm = geomapdemo.Map(center=[40,-100], zoom= 4)\nm\n</code></pre> <p>To create a folium-based interactive map:</p> <pre><code>import geomapdemo.foliumap as geomapdemo\nm = geomapdemo.Map(center= [40,-100], zoom = 4)\nm\n</code></pre> <p>To add additional basemaps to the Map:</p> <pre><code>Map.add_basemap('Esri.OceanBasemap')\nMap.add_basemap('Esri.NatGeoWorldMap')\n</code></pre> <p>To generate random string</p> <pre><code>geomapdemo.generate_random_string()\ngeomapdemo.generate_random_string(9, upper=True, digits=True)\n</code></pre> <p>To generate random number</p> <pre><code>geomapdemo.generate_lucky_number()\ngeomapdemo.generate_lucky_number(10)\n</code></pre>"},{"location":"examples/add_choropleth_map/","title":"Add choropleth map","text":"In\u00a0[\u00a0]: Copied! <pre>import geomapdemo.foliumap as geomapdemo\n</pre> import geomapdemo.foliumap as geomapdemo In\u00a0[\u00a0]: Copied! <pre>m = geomapdemo.Map(center=[48, -102], zoom=3)\n</pre> m = geomapdemo.Map(center=[48, -102], zoom=3) In\u00a0[\u00a0]: Copied! <pre>columns = [\"State\", \"Unemployment\"]\nkey_on = \"feature.id\"\n</pre> columns = [\"State\", \"Unemployment\"] key_on = \"feature.id\" In\u00a0[\u00a0]: Copied! <pre>m.add_choropleth_map(\n    json=\"https://raw.githubusercontent.com/python-visualization/folium/main/examples/data/us-states.json\",\n    csv=\"https://raw.githubusercontent.com/python-visualization/folium/main/examples/data/US_Unemployment_Oct2012.csv\",\n    columns=columns,\n    key_on=key_on,\n)\n</pre> m.add_choropleth_map(     json=\"https://raw.githubusercontent.com/python-visualization/folium/main/examples/data/us-states.json\",     csv=\"https://raw.githubusercontent.com/python-visualization/folium/main/examples/data/US_Unemployment_Oct2012.csv\",     columns=columns,     key_on=key_on, ) In\u00a0[\u00a0]: Copied! <pre>m\n</pre> m"},{"location":"examples/add_geojson/","title":"Add geojson","text":"In\u00a0[\u00a0]: Copied! <pre>import geomapdemo.foliumap as geomapdemo\n</pre> import geomapdemo.foliumap as geomapdemo In\u00a0[\u00a0]: Copied! <pre>m = geomapdemo.Map(center=[40, -100], zoom=4)\n</pre> m = geomapdemo.Map(center=[40, -100], zoom=4) In\u00a0[\u00a0]: Copied! <pre>m.add_geojson(\n    \"https://raw.githubusercontent.com/python-visualization/folium/master/examples/data/us-states.json\"\n)\n</pre> m.add_geojson(     \"https://raw.githubusercontent.com/python-visualization/folium/master/examples/data/us-states.json\" ) In\u00a0[\u00a0]: Copied! <pre>m\n</pre> m"},{"location":"examples/add_shp/","title":"Add shp","text":"In\u00a0[\u00a0]: Copied! <pre>import geomapdemo.foliumap as geomapdemo\n</pre> import geomapdemo.foliumap as geomapdemo In\u00a0[\u00a0]: Copied! <pre>m = geomapdemo.Map()\n</pre> m = geomapdemo.Map() In\u00a0[\u00a0]: Copied! <pre>m.add_shp(\"data/countries.shp\")\n</pre> m.add_shp(\"data/countries.shp\") In\u00a0[\u00a0]: Copied! <pre>m\n</pre> m"},{"location":"examples/chart/","title":"Chart","text":"In\u00a0[\u00a0]: Copied! <pre>import geomapdemo.chart as geomapdemo\n</pre> import geomapdemo.chart as geomapdemo In\u00a0[\u00a0]: Copied! <pre>data = \"data/titanic.csv\"\n</pre> data = \"data/titanic.csv\" In\u00a0[\u00a0]: Copied! <pre>geomapdemo.single_box_plot(data=data, variable=\"age\", color=\"red\")\n</pre> geomapdemo.single_box_plot(data=data, variable=\"age\", color=\"red\") In\u00a0[\u00a0]: Copied! <pre>geomapdemo.box_plot(data=data, x=\"age\", y=\"class\")\n</pre> geomapdemo.box_plot(data=data, x=\"age\", y=\"class\") In\u00a0[\u00a0]: Copied! <pre>geomapdemo.single_violin(data=data, variable=\"age\")\n</pre> geomapdemo.single_violin(data=data, variable=\"age\") In\u00a0[\u00a0]: Copied! <pre>geomapdemo.violin_spilt(data=data, x=\"deck\", y=\"age\", hue=\"alive\")\n</pre> geomapdemo.violin_spilt(data=data, x=\"deck\", y=\"age\", hue=\"alive\") In\u00a0[\u00a0]: Copied! <pre>geomapdemo.violin_plot(data=data, x=\"deck\", y=\"age\", hue=\"alive\")\n</pre> geomapdemo.violin_plot(data=data, x=\"deck\", y=\"age\", hue=\"alive\") In\u00a0[\u00a0]: Copied! <pre>\n</pre> In\u00a0[\u00a0]: Copied! <pre>\n</pre>"},{"location":"examples/chart_Example2/","title":"chart Example2","text":"In\u00a0[\u00a0]: Copied! <pre>import geomapdemo.chart as geomapdemo\n</pre> import geomapdemo.chart as geomapdemo In\u00a0[\u00a0]: Copied! <pre>data = \"data/tips.csv\"\n</pre> data = \"data/tips.csv\" In\u00a0[\u00a0]: Copied! <pre>geomapdemo.scatter_plot(data=data, x=\"day\", y=\"total_bill\")\n</pre> geomapdemo.scatter_plot(data=data, x=\"day\", y=\"total_bill\") In\u00a0[\u00a0]: Copied! <pre>geomapdemo.bar_plot(data=data, x=\"day\", y=\"total_bill\")\n</pre> geomapdemo.bar_plot(data=data, x=\"day\", y=\"total_bill\") In\u00a0[\u00a0]: Copied! <pre>geomapdemo.single_bar_plot(data=data, variable=\"total_bill\")\n</pre> geomapdemo.single_bar_plot(data=data, variable=\"total_bill\") In\u00a0[\u00a0]: Copied! <pre>geomapdemo.count_plot(data=data, x=\"day\")\n</pre> geomapdemo.count_plot(data=data, x=\"day\") In\u00a0[\u00a0]: Copied! <pre>geomapdemo.single_count_plot(data=data, variable=\"day\")\n</pre> geomapdemo.single_count_plot(data=data, variable=\"day\")"},{"location":"examples/folium/","title":"Folium","text":"In\u00a0[\u00a0]: Copied! <pre>import geomapdemo.foliumap as geomapdemo\n</pre> import geomapdemo.foliumap as geomapdemo In\u00a0[\u00a0]: Copied! <pre>m = geomapdemo.Map(center=[40, -100], zoom=4)\n</pre> m = geomapdemo.Map(center=[40, -100], zoom=4) In\u00a0[\u00a0]: Copied! <pre>url = \"https://server.arcgisonline.com/ArcGIS/rest/services/World_Imagery/MapServer/tile/{z}/{y}/{x}\"\n</pre> url = \"https://server.arcgisonline.com/ArcGIS/rest/services/World_Imagery/MapServer/tile/{z}/{y}/{x}\" In\u00a0[\u00a0]: Copied! <pre>m.add_tile_layer(url=url, name=\"Satellite\", attribution=\"Esri\")\n</pre> m.add_tile_layer(url=url, name=\"Satellite\", attribution=\"Esri\") In\u00a0[\u00a0]: Copied! <pre>m.add_marker(location=[40, -100], popup=\"Marker\")\n</pre> m.add_marker(location=[40, -100], popup=\"Marker\") In\u00a0[\u00a0]: Copied! <pre>m.add_circle_marker(location=[40, -100], radius=20, popup=\"Circle Marker\")\n</pre> m.add_circle_marker(location=[40, -100], radius=20, popup=\"Circle Marker\") In\u00a0[\u00a0]: Copied! <pre>m.add_circle(location=[40, -100], radius=20, popup=\"Circle\")\n</pre> m.add_circle(location=[40, -100], radius=20, popup=\"Circle\") In\u00a0[\u00a0]: Copied! <pre>m.click_for_marker(popup=\"Waypoint\")\n</pre> m.click_for_marker(popup=\"Waypoint\") In\u00a0[\u00a0]: Copied! <pre>m\n</pre> m"},{"location":"examples/geomapdemo/","title":"Geomapdemo","text":"In\u00a0[\u00a0]: Copied! <pre># pip install geomapdemo\n</pre> # pip install geomapdemo In\u00a0[\u00a0]: Copied! <pre>import geomapdemo\n</pre> import geomapdemo In\u00a0[\u00a0]: Copied! <pre>m = geomapdemo.Map(center=[40, -100], zoom=10)\nm\n</pre> m = geomapdemo.Map(center=[40, -100], zoom=10) m In\u00a0[\u00a0]: Copied! <pre>m.add_basemap(\"Stamen.Toner\")\n</pre> m.add_basemap(\"Stamen.Toner\")"},{"location":"examples/intro/","title":"Intro","text":"In\u00a0[\u00a0]: Copied! <pre># pip install geomapdemo\n</pre> # pip install geomapdemo In\u00a0[\u00a0]: Copied! <pre>import geomapdemo\n</pre> import geomapdemo In\u00a0[\u00a0]: Copied! <pre>geomapdemo.generate_random_string()\n</pre> geomapdemo.generate_random_string() In\u00a0[\u00a0]: Copied! <pre>geomapdemo.generate_random_string(9)\n</pre> geomapdemo.generate_random_string(9) In\u00a0[\u00a0]: Copied! <pre>geomapdemo.generate_random_string(9, upper=True, punctuations=True, digits=True)\n</pre> geomapdemo.generate_random_string(9, upper=True, punctuations=True, digits=True) In\u00a0[\u00a0]: Copied! <pre>geomapdemo.generate_lucky_number()\n</pre> geomapdemo.generate_lucky_number() In\u00a0[\u00a0]: Copied! <pre>geomapdemo.generate_lucky_number(10)\n</pre> geomapdemo.generate_lucky_number(10)"},{"location":"examples/intro/#intro","title":"Intro\u00b6","text":""},{"location":"examples/ipywidgets/","title":"Ipywidgets","text":"<p>Introduction to ipywidgets</p> <p>https://ipywidgets.readthedocs.io</p> In\u00a0[\u00a0]: Copied! <pre>import geomapdemo\n</pre> import geomapdemo In\u00a0[\u00a0]: Copied! <pre>m = geomapdemo.Map()\nm\n</pre> m = geomapdemo.Map() m In\u00a0[\u00a0]: Copied! <pre>url = \"https://earthengine.google.com/static/images/earth-engine-logo.png\"\n</pre> url = \"https://earthengine.google.com/static/images/earth-engine-logo.png\" In\u00a0[\u00a0]: Copied! <pre>m.add_logo(url=url)\n</pre> m.add_logo(url=url) In\u00a0[\u00a0]: Copied! <pre>url = \"https://opendata.digitalglobe.com/events/mauritius-oil-spill/post-event/2020-08-12/105001001F1B5B00/105001001F1B5B00.tif\"\nm.add_raster(url, name=\"Raster\")\n</pre> url = \"https://opendata.digitalglobe.com/events/mauritius-oil-spill/post-event/2020-08-12/105001001F1B5B00/105001001F1B5B00.tif\" m.add_raster(url, name=\"Raster\") In\u00a0[\u00a0]: Copied! <pre>m.layers\n</pre> m.layers In\u00a0[\u00a0]: Copied! <pre>raster_layer = m.layers[-1]\nraster_layer.interact(opacity=(0, 1, 0.1))\n</pre> raster_layer = m.layers[-1] raster_layer.interact(opacity=(0, 1, 0.1)) In\u00a0[\u00a0]: Copied! <pre>import ipywidgets as widgets\n</pre> import ipywidgets as widgets In\u00a0[\u00a0]: Copied! <pre>int_slider = widgets.IntSlider(\n    value=2000, min=1984, max=2020, step=1, description=\"Year:\"\n)\nint_slider\n</pre> int_slider = widgets.IntSlider(     value=2000, min=1984, max=2020, step=1, description=\"Year:\" ) int_slider In\u00a0[\u00a0]: Copied! <pre>int_slider.value\n</pre> int_slider.value In\u00a0[\u00a0]: Copied! <pre>float_slider = widgets.FloatSlider(\n    value=0, min=-1, max=1, step=0.05, description=\"Threshold:\"\n)\nfloat_slider\n</pre> float_slider = widgets.FloatSlider(     value=0, min=-1, max=1, step=0.05, description=\"Threshold:\" ) float_slider In\u00a0[\u00a0]: Copied! <pre>float_slider.value\n</pre> float_slider.value In\u00a0[\u00a0]: Copied! <pre>int_progress = widgets.IntProgress(\n    value=7,\n    min=0,\n    max=10,\n    step=1,\n    description=\"Loading:\",\n    bar_style=\"\",  # 'success', 'info', 'warning', 'danger' or ''\n    orientation=\"horizontal\",\n)\nint_progress\n</pre> int_progress = widgets.IntProgress(     value=7,     min=0,     max=10,     step=1,     description=\"Loading:\",     bar_style=\"\",  # 'success', 'info', 'warning', 'danger' or ''     orientation=\"horizontal\", ) int_progress In\u00a0[\u00a0]: Copied! <pre>int_text = widgets.IntText(\n    value=7,\n    description=\"Any:\",\n)\nint_text\n</pre> int_text = widgets.IntText(     value=7,     description=\"Any:\", ) int_text In\u00a0[\u00a0]: Copied! <pre>float_text = widgets.FloatText(\n    value=7.5,\n    description=\"Any:\",\n)\nfloat_text\n</pre> float_text = widgets.FloatText(     value=7.5,     description=\"Any:\", ) float_text In\u00a0[\u00a0]: Copied! <pre>toggle_button = widgets.ToggleButton(\n    value=False,\n    description=\"Click me\",\n    disabled=False,\n    button_style=\"success\",  # 'success', 'info', 'warning', 'danger' or ''\n    tooltip=\"Description\",\n    icon=\"check\",  # (FontAwesome names without the `fa-` prefix)\n)\ntoggle_button\n</pre> toggle_button = widgets.ToggleButton(     value=False,     description=\"Click me\",     disabled=False,     button_style=\"success\",  # 'success', 'info', 'warning', 'danger' or ''     tooltip=\"Description\",     icon=\"check\",  # (FontAwesome names without the `fa-` prefix) ) toggle_button In\u00a0[\u00a0]: Copied! <pre>toggle_button.value\n</pre> toggle_button.value In\u00a0[\u00a0]: Copied! <pre>checkbox = widgets.Checkbox(\n    value=False, description=\"Check me\", disabled=False, indent=False\n)\ncheckbox\n</pre> checkbox = widgets.Checkbox(     value=False, description=\"Check me\", disabled=False, indent=False ) checkbox In\u00a0[\u00a0]: Copied! <pre>checkbox.value\n</pre> checkbox.value In\u00a0[\u00a0]: Copied! <pre>dropdown = widgets.Dropdown(\n    options=[\"USA\", \"Canada\", \"Mexico\"], value=\"Canada\", description=\"Country:\"\n)\ndropdown\n</pre> dropdown = widgets.Dropdown(     options=[\"USA\", \"Canada\", \"Mexico\"], value=\"Canada\", description=\"Country:\" ) dropdown In\u00a0[\u00a0]: Copied! <pre>dropdown.value\n</pre> dropdown.value In\u00a0[\u00a0]: Copied! <pre>radio_buttons = widgets.RadioButtons(\n    options=[\"USA\", \"Canada\", \"Mexico\"], value=\"Canada\", description=\"Country:\"\n)\nradio_buttons\n</pre> radio_buttons = widgets.RadioButtons(     options=[\"USA\", \"Canada\", \"Mexico\"], value=\"Canada\", description=\"Country:\" ) radio_buttons In\u00a0[\u00a0]: Copied! <pre>radio_buttons.value\n</pre> radio_buttons.value In\u00a0[\u00a0]: Copied! <pre>text = widgets.Text(\n    value=\"USA\",\n    placeholder=\"Enter a country name\",\n    description=\"Country:\",\n    disabled=False,\n)\ntext\n</pre> text = widgets.Text(     value=\"USA\",     placeholder=\"Enter a country name\",     description=\"Country:\",     disabled=False, ) text In\u00a0[\u00a0]: Copied! <pre>text.value\n</pre> text.value In\u00a0[\u00a0]: Copied! <pre>widgets.Textarea(\n    value=\"Hello World\",\n    placeholder=\"Type something\",\n    description=\"String:\",\n    disabled=False,\n)\n</pre> widgets.Textarea(     value=\"Hello World\",     placeholder=\"Type something\",     description=\"String:\",     disabled=False, ) In\u00a0[\u00a0]: Copied! <pre>widgets.HTML(\n    value=\"Hello &lt;b&gt;World&lt;/b&gt;\",\n    placeholder=\"Some HTML\",\n    description=\"Some HTML\",\n)\n</pre> widgets.HTML(     value=\"Hello World\",     placeholder=\"Some HTML\",     description=\"Some HTML\", ) In\u00a0[\u00a0]: Copied! <pre>widgets.HTML(\n    value='&lt;img src=\"https://earthengine.google.com/static/images/earth-engine-logo.png\" width=\"100\" height=\"100\"&gt;'\n)\n</pre> widgets.HTML(     value='' ) In\u00a0[\u00a0]: Copied! <pre>button = widgets.Button(\n    description=\"Click me\",\n    button_style=\"info\",  # 'success', 'info', 'warning', 'danger' or ''\n    tooltip=\"Click me\",\n    icon=\"check\",  # (FontAwesome names without the `fa-` prefix)\n)\nbutton\n</pre> button = widgets.Button(     description=\"Click me\",     button_style=\"info\",  # 'success', 'info', 'warning', 'danger' or ''     tooltip=\"Click me\",     icon=\"check\",  # (FontAwesome names without the `fa-` prefix) ) button In\u00a0[\u00a0]: Copied! <pre>date_picker = widgets.DatePicker(description=\"Pick a Date\", disabled=False)\ndate_picker\n</pre> date_picker = widgets.DatePicker(description=\"Pick a Date\", disabled=False) date_picker In\u00a0[\u00a0]: Copied! <pre>date_picker.value\n</pre> date_picker.value In\u00a0[\u00a0]: Copied! <pre>color_picker = widgets.ColorPicker(\n    concise=False, description=\"Pick a color\", value=\"blue\", disabled=False\n)\ncolor_picker\n</pre> color_picker = widgets.ColorPicker(     concise=False, description=\"Pick a color\", value=\"blue\", disabled=False ) color_picker In\u00a0[\u00a0]: Copied! <pre>color_picker.value\n</pre> color_picker.value In\u00a0[\u00a0]: Copied! <pre>out = widgets.Output(layout={\"border\": \"1px solid black\"})\nout\n</pre> out = widgets.Output(layout={\"border\": \"1px solid black\"}) out In\u00a0[\u00a0]: Copied! <pre>with out:\n    for i in range(10):\n        print(i, \"Hello world!\")\n</pre> with out:     for i in range(10):         print(i, \"Hello world!\") In\u00a0[\u00a0]: Copied! <pre>from IPython.display import YouTubeVideo\n\nout.clear_output()\nwith out:\n    display(YouTubeVideo(\"mA21Us_3m28\"))\nout\n</pre> from IPython.display import YouTubeVideo  out.clear_output() with out:     display(YouTubeVideo(\"mA21Us_3m28\")) out In\u00a0[\u00a0]: Copied! <pre>out.clear_output()\nwith out:\n    display(widgets.IntSlider())\nout\n</pre> out.clear_output() with out:     display(widgets.IntSlider()) out In\u00a0[\u00a0]: Copied! <pre>import ipywidgets as widgets\nfrom ipyleaflet import WidgetControl\n</pre> import ipywidgets as widgets from ipyleaflet import WidgetControl In\u00a0[\u00a0]: Copied! <pre>m = geomapdemo.Map()\nm\n</pre> m = geomapdemo.Map() m In\u00a0[\u00a0]: Copied! <pre>output_widget = widgets.Output(layout={\"border\": \"1px solid black\"})\noutput_control = WidgetControl(widget=output_widget, position=\"bottomright\")\nm.add_control(output_control)\n</pre> output_widget = widgets.Output(layout={\"border\": \"1px solid black\"}) output_control = WidgetControl(widget=output_widget, position=\"bottomright\") m.add_control(output_control) In\u00a0[\u00a0]: Copied! <pre>with output_widget:\n    print(\"Nice map!\")\n</pre> with output_widget:     print(\"Nice map!\") In\u00a0[\u00a0]: Copied! <pre>output_widget.clear_output()\nlogo = widgets.HTML(\n    value='&lt;img src=\"https://earthengine.google.com/static/images/earth-engine-logo.png\" width=\"100\" height=\"100\"&gt;'\n)\nwith output_widget:\n    display(logo)\n</pre> output_widget.clear_output() logo = widgets.HTML(     value='' ) with output_widget:     display(logo) In\u00a0[\u00a0]: Copied! <pre>def handle_interaction(**kwargs):\n    latlon = kwargs.get(\"coordinates\")\n    # latlon = [round(x, 2) for x in latlon]\n    if kwargs.get(\"type\") == \"click\":\n        with output_widget:\n            output_widget.clear_output()\n            print(\"You clicked at: {}\".format(latlon))\n\n\nm.on_interaction(handle_interaction)\n</pre> def handle_interaction(**kwargs):     latlon = kwargs.get(\"coordinates\")     # latlon = [round(x, 2) for x in latlon]     if kwargs.get(\"type\") == \"click\":         with output_widget:             output_widget.clear_output()             print(\"You clicked at: {}\".format(latlon))   m.on_interaction(handle_interaction)"},{"location":"examples/ipywidgets/#import-libraries","title":"Import libraries\u00b6","text":""},{"location":"examples/ipywidgets/#create-an-interactive-map","title":"Create an interactive map\u00b6","text":""},{"location":"examples/ipywidgets/#change-layer-opacity","title":"Change layer opacity\u00b6","text":""},{"location":"examples/ipywidgets/#widget-list","title":"Widget list\u00b6","text":"<p>Widget list: https://ipywidgets.readthedocs.io/en/latest/examples/Widget%20List.html</p> <p>Icons: https://fontawesome.com/v4.7.0/icons</p>"},{"location":"examples/ipywidgets/#numeric-widgets","title":"Numeric widgets\u00b6","text":""},{"location":"examples/ipywidgets/#intslider","title":"IntSlider\u00b6","text":""},{"location":"examples/ipywidgets/#floatslider","title":"FloatSlider\u00b6","text":""},{"location":"examples/ipywidgets/#intprogress","title":"IntProgress\u00b6","text":""},{"location":"examples/ipywidgets/#boolean-widgets","title":"Boolean widgets\u00b6","text":""},{"location":"examples/ipywidgets/#togglebutton","title":"ToggleButton\u00b6","text":""},{"location":"examples/ipywidgets/#checkbox","title":"Checkbox\u00b6","text":""},{"location":"examples/ipywidgets/#selection-widgets","title":"Selection widgets\u00b6","text":""},{"location":"examples/ipywidgets/#dropdown","title":"Dropdown\u00b6","text":""},{"location":"examples/ipywidgets/#radiobuttons","title":"RadioButtons\u00b6","text":""},{"location":"examples/ipywidgets/#string-widgets","title":"String widgets\u00b6","text":""},{"location":"examples/ipywidgets/#text","title":"Text\u00b6","text":""},{"location":"examples/ipywidgets/#textarea","title":"Textarea\u00b6","text":""},{"location":"examples/ipywidgets/#html","title":"HTML\u00b6","text":""},{"location":"examples/ipywidgets/#button","title":"Button\u00b6","text":""},{"location":"examples/ipywidgets/#date-picker","title":"Date picker\u00b6","text":""},{"location":"examples/ipywidgets/#color-picker","title":"Color picker\u00b6","text":""},{"location":"examples/ipywidgets/#output-widget","title":"Output widget\u00b6","text":""},{"location":"examples/ipywidgets/#add-a-widget-to-the-map","title":"Add a widget to the map\u00b6","text":""},{"location":"examples/ipywidgets_box/","title":"Ipywidgets box","text":"In\u00a0[\u00a0]: Copied! <pre>import geomapdemo\n</pre> import geomapdemo In\u00a0[\u00a0]: Copied! <pre>m = geomapdemo.Map()\nm\n</pre> m = geomapdemo.Map() m In\u00a0[\u00a0]: Copied! <pre>m.add_toolbar()\n</pre> m.add_toolbar() In\u00a0[\u00a0]: Copied! <pre>import ipywidgets as widgets\n</pre> import ipywidgets as widgets In\u00a0[\u00a0]: Copied! <pre>widget_width = \"250px\"\npadding = \"0px 0px 0px 4px\"  # upper, right, bottom, left\n</pre> widget_width = \"250px\" padding = \"0px 0px 0px 4px\"  # upper, right, bottom, left <p>icon: https://fontawesome.com/v4.7.0/icons/</p> In\u00a0[\u00a0]: Copied! <pre>toolbar_button = widgets.ToggleButton(\n    value=False,\n    tooltip=\"Toolbar\",\n    icon=\"gear\",\n    layout=widgets.Layout(width=\"28px\", height=\"28px\", padding=padding),\n)\ntoolbar_button\n</pre> toolbar_button = widgets.ToggleButton(     value=False,     tooltip=\"Toolbar\",     icon=\"gear\",     layout=widgets.Layout(width=\"28px\", height=\"28px\", padding=padding), ) toolbar_button In\u00a0[\u00a0]: Copied! <pre># toolbar_button.layout.width = \"28px\"\n</pre> # toolbar_button.layout.width = \"28px\" In\u00a0[\u00a0]: Copied! <pre>toolbar_button.value\n</pre> toolbar_button.value In\u00a0[\u00a0]: Copied! <pre>close_button = widgets.ToggleButton(\n    value=False,\n    tooltip=\"Close the tool\",\n    icon=\"times\",\n    button_style=\"primary\",\n    layout=widgets.Layout(height=\"28px\", width=\"28px\", padding=padding),\n)\nclose_button\n</pre> close_button = widgets.ToggleButton(     value=False,     tooltip=\"Close the tool\",     icon=\"times\",     button_style=\"primary\",     layout=widgets.Layout(height=\"28px\", width=\"28px\", padding=padding), ) close_button In\u00a0[\u00a0]: Copied! <pre>widgets.HBox([close_button, toolbar_button])\n</pre> widgets.HBox([close_button, toolbar_button]) In\u00a0[\u00a0]: Copied! <pre>box = widgets.HBox()\nbox.children = [close_button, toolbar_button]\nbox\n</pre> box = widgets.HBox() box.children = [close_button, toolbar_button] box In\u00a0[\u00a0]: Copied! <pre>checkbox = widgets.Checkbox(\n    description=\"Checkbox\",\n    indent=False,\n    layout=widgets.Layout(padding=padding, width=widget_width),\n)\ncheckbox\n</pre> checkbox = widgets.Checkbox(     description=\"Checkbox\",     indent=False,     layout=widgets.Layout(padding=padding, width=widget_width), ) checkbox In\u00a0[\u00a0]: Copied! <pre>dropdown = widgets.Dropdown(\n    options=[\"Option 1\", \"Option 2\", \"Option 3\"],\n    value=None,\n    description=\"Dropdown:\",\n    layout=widgets.Layout(width=widget_width, padding=padding),\n    style={\"description_width\": \"initial\"},\n)\ndropdown\n</pre> dropdown = widgets.Dropdown(     options=[\"Option 1\", \"Option 2\", \"Option 3\"],     value=None,     description=\"Dropdown:\",     layout=widgets.Layout(width=widget_width, padding=padding),     style={\"description_width\": \"initial\"}, ) dropdown In\u00a0[\u00a0]: Copied! <pre>int_slider = widgets.IntSlider(\n    min=1,\n    max=100,\n    description=\"Int Slider: \",\n    readout=True,\n    continuous_update=True,\n    layout=widgets.Layout(width=widget_width, padding=padding),\n    style={\"description_width\": \"initial\"},\n)\nint_slider\n</pre> int_slider = widgets.IntSlider(     min=1,     max=100,     description=\"Int Slider: \",     readout=True,     continuous_update=True,     layout=widgets.Layout(width=widget_width, padding=padding),     style={\"description_width\": \"initial\"}, ) int_slider In\u00a0[\u00a0]: Copied! <pre>float_slider = widgets.FloatSlider(\n    min=1,\n    max=100,\n    description=\"Float Slider: \",\n    readout=True,\n    continuous_update=True,\n    layout=widgets.Layout(width=widget_width, padding=padding),\n    style={\"description_width\": \"initial\"},\n)\n</pre> float_slider = widgets.FloatSlider(     min=1,     max=100,     description=\"Float Slider: \",     readout=True,     continuous_update=True,     layout=widgets.Layout(width=widget_width, padding=padding),     style={\"description_width\": \"initial\"}, ) In\u00a0[\u00a0]: Copied! <pre>color = widgets.ColorPicker(\n    concise=False,\n    description=\"Color:\",\n    value=\"white\",\n    style={\"description_width\": \"initial\"},\n    layout=widgets.Layout(width=widget_width, padding=padding),\n)\ncolor\n</pre> color = widgets.ColorPicker(     concise=False,     description=\"Color:\",     value=\"white\",     style={\"description_width\": \"initial\"},     layout=widgets.Layout(width=widget_width, padding=padding), ) color In\u00a0[\u00a0]: Copied! <pre>text = widgets.Text(\n    value=\"\",\n    description=\"Textbox:\",\n    placeholder=\"Enter sth.\",\n    style={\"description_width\": \"initial\"},\n    layout=widgets.Layout(width=widget_width, padding=padding),\n)\ntext\n</pre> text = widgets.Text(     value=\"\",     description=\"Textbox:\",     placeholder=\"Enter sth.\",     style={\"description_width\": \"initial\"},     layout=widgets.Layout(width=widget_width, padding=padding), ) text In\u00a0[\u00a0]: Copied! <pre>textarea = widgets.Textarea(\n    placeholder=\"Placeholder\",\n    layout=widgets.Layout(width=widget_width),\n)\ntextarea\n</pre> textarea = widgets.Textarea(     placeholder=\"Placeholder\",     layout=widgets.Layout(width=widget_width), ) textarea In\u00a0[\u00a0]: Copied! <pre>buttons = widgets.ToggleButtons(\n    value=None,\n    options=[\"Apply\", \"Reset\", \"Close\"],\n    tooltips=[\"Apply\", \"Reset\", \"Close\"],\n    button_style=\"primary\",\n)\nbuttons.style.button_width = \"80px\"\nbuttons\n</pre> buttons = widgets.ToggleButtons(     value=None,     options=[\"Apply\", \"Reset\", \"Close\"],     tooltips=[\"Apply\", \"Reset\", \"Close\"],     button_style=\"primary\", ) buttons.style.button_width = \"80px\" buttons In\u00a0[\u00a0]: Copied! <pre>output = widgets.Output(layout=widgets.Layout(width=widget_width, padding=padding))\nwith output:\n    output.clear_output()\n    print(\"Running ...\")\noutput\n</pre> output = widgets.Output(layout=widgets.Layout(width=widget_width, padding=padding)) with output:     output.clear_output()     print(\"Running ...\") output In\u00a0[\u00a0]: Copied! <pre>toolbar_widget = widgets.VBox()\ntoolbar_widget.children = [\n    widgets.HBox([close_button, toolbar_button]),\n    checkbox,\n    int_slider,\n    float_slider,\n    dropdown,\n    text,\n    color,\n    textarea,\n    buttons,\n    output,\n]\ntoolbar_widget\n</pre> toolbar_widget = widgets.VBox() toolbar_widget.children = [     widgets.HBox([close_button, toolbar_button]),     checkbox,     int_slider,     float_slider,     dropdown,     text,     color,     textarea,     buttons,     output, ] toolbar_widget"},{"location":"examples/linkmap/","title":"Linkmap","text":"In\u00a0[\u00a0]: Copied! <pre>import geomapdemo\n</pre> import geomapdemo In\u00a0[\u00a0]: Copied! <pre>m = geomapdemo.Map(center=[-33.8650, 151.2094], zoom=20)\nm\n</pre> m = geomapdemo.Map(center=[-33.8650, 151.2094], zoom=20) m In\u00a0[\u00a0]: Copied! <pre>m.add_linked_map()\n</pre> m.add_linked_map()"},{"location":"examples/localraster/","title":"Localraster","text":"In\u00a0[\u00a0]: Copied! <pre>import geomapdemo\n</pre> import geomapdemo In\u00a0[\u00a0]: Copied! <pre>m = geomapdemo.Map()\nm\n</pre> m = geomapdemo.Map() m In\u00a0[\u00a0]: Copied! <pre>m.add_local_raster(\"data/srtm90.tif\")\n</pre> m.add_local_raster(\"data/srtm90.tif\")"},{"location":"examples/raster/","title":"Raster","text":"In\u00a0[\u00a0]: Copied! <pre>import geomapdemo\n</pre> import geomapdemo In\u00a0[\u00a0]: Copied! <pre>m = geomapdemo.Map()\nm\n</pre> m = geomapdemo.Map() m In\u00a0[\u00a0]: Copied! <pre>url = \"https://opendata.digitalglobe.com/events/mauritius-oil-spill/post-event/2020-08-12/105001001F1B5B00/105001001F1B5B00.tif\"\n</pre> url = \"https://opendata.digitalglobe.com/events/mauritius-oil-spill/post-event/2020-08-12/105001001F1B5B00/105001001F1B5B00.tif\" In\u00a0[\u00a0]: Copied! <pre>m.add_raster(url)\n</pre> m.add_raster(url)"},{"location":"examples/test-folium/","title":"Test folium","text":"In\u00a0[\u00a0]: Copied! <pre>import geomapdemo.foliumap as geomapdemo\n</pre> import geomapdemo.foliumap as geomapdemo In\u00a0[\u00a0]: Copied! <pre>m = geomapdemo.Map(center=[-71.38, -73.9], zoom=11)\n</pre> m = geomapdemo.Map(center=[-71.38, -73.9], zoom=11) In\u00a0[\u00a0]: Copied! <pre>trail_coordinates = [\n    (-71.351871840295871, -73.655963711222626),\n    (-71.374144382613707, -73.719861619751498),\n    (-71.391042575973145, -73.784922248007007),\n    (-71.400964450973134, -73.851042243124397),\n    (-71.402411391077322, -74.050048183880477),\n]\n</pre> trail_coordinates = [     (-71.351871840295871, -73.655963711222626),     (-71.374144382613707, -73.719861619751498),     (-71.391042575973145, -73.784922248007007),     (-71.400964450973134, -73.851042243124397),     (-71.402411391077322, -74.050048183880477), ] In\u00a0[\u00a0]: Copied! <pre>m.add_polylines(trail_coordinates, popup=\"Trail\")\n</pre> m.add_polylines(trail_coordinates, popup=\"Trail\") In\u00a0[\u00a0]: Copied! <pre>m\n</pre> m In\u00a0[\u00a0]: Copied! <pre>m.set_center(lat=40, lon=-100, zoom=10)\n</pre> m.set_center(lat=40, lon=-100, zoom=10) In\u00a0[\u00a0]: Copied! <pre>control_points = [\n    (40.7128, -100.0059),\n    (40.7128, -99.9959),\n    (40.7028, -99.9959),\n    (40.7028, -100.0059),\n]\n</pre> control_points = [     (40.7128, -100.0059),     (40.7128, -99.9959),     (40.7028, -99.9959),     (40.7028, -100.0059), ] In\u00a0[\u00a0]: Copied! <pre>m.add_polygon(control_points, popup=\"Control Points\")\n</pre> m.add_polygon(control_points, popup=\"Control Points\") In\u00a0[\u00a0]: Copied! <pre>m.set_center(lat=40.7028, lon=-100.0059, zoom=15)\n</pre> m.set_center(lat=40.7028, lon=-100.0059, zoom=15) In\u00a0[\u00a0]: Copied! <pre>m.add_layer_control()\n</pre> m.add_layer_control() In\u00a0[\u00a0]: Copied! <pre>m\n</pre> m"},{"location":"examples/xy/","title":"Xy","text":"In\u00a0[\u00a0]: Copied! <pre>import geomapdemo\n</pre> import geomapdemo In\u00a0[\u00a0]: Copied! <pre>m = geomapdemo.Map()\nm\n</pre> m = geomapdemo.Map() m In\u00a0[\u00a0]: Copied! <pre>data = \"https://raw.githubusercontent.com/gee-community/geemap/master/examples/data/country_centroids.csv\"\nx = \"longitude\"\ny = \"latitude\"\n</pre> data = \"https://raw.githubusercontent.com/gee-community/geemap/master/examples/data/country_centroids.csv\" x = \"longitude\" y = \"latitude\" In\u00a0[\u00a0]: Copied! <pre>m.add_XY_points_layer(data=data, x=x, y=y)\n</pre> m.add_XY_points_layer(data=data, x=x, y=y)"}]}